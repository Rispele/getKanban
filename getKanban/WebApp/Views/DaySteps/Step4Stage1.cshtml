@using Domain.Game
@model WebApp.Models.DayStepModels.TicketChoiceStepModel

@functions
{
    private void FillTickets(IEnumerable<Ticket> tickets, string cardStyle, string containerName)
    {
        <div class="@Html.Raw($"checkboxContainer{Model.PageType}Version")">
            <h1 class="title">@containerName</h1>
            <hr class="divider">

            @foreach (var ticket in tickets)
            {
                var ticketId = ticket.id;
                <div class="checkboxCardsMargin">
                    <input type="checkbox" class="checkboxCardInput" id="@ticketId" checked="@ticket.IsReleased(Model.DayNumber)">
                    <label for="@ticketId" class="checkboxCardContainer @cardStyle cursorPointer">
                        <div class="checkboxCardContent">
                            <h2 class="checkboxCardNumber">@ticketId</h2>
                            <div class="lines">
                                <div class="line full"></div>
                                <div class="line half"></div>
                                <div class="line half"></div>
                            </div>
                        </div>
                    </label>
                </div>
            }
        </div>
    }
}

<div class="container1">
    <h1 class="title">Выберите тикеты, которые были сегодня поставлены</h1>
    <hr class="divider">
    <div class="container2">
        @if (Model.TicketIds.Any(x => x.id.Contains("S")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("S")),
                "checkboxCardStyle1",
                "Обычные");
        }

        @if (Model.TicketIds.Any(x => x.id.Contains("I")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("I")),
                "checkboxCardStyle2",
                "Инфраструктурные");
        }

        @if (Model.TicketIds.Any(x => x.id.Contains("E") || x.id.Contains("F")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("E") || x.id.Contains("F")),
                "checkboxCardStyle3",
                "Срочные");
        }
    </div>

    <button class="stepControlButtons rightButton" id="prev">
        Назад
    </button>

    <button class="stepControlButtons rightButton" id="next">
        Далее
    </button>
</div>

<script src="~/js/popup.js"></script>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");
    setSwitchEvent("prev", connection, "@Model.GameSessionId", "@Model.TeamId", 4, 0);
    setSwitchEvent("next", connection, "@Model.GameSessionId", "@Model.TeamId", 4, 2);
    setRollbackEvent(connection);
    
    connection.on("NotifyUpdateTicketChoice", function (ticketId) {
        const ticket = document.getElementById(ticketId);
        ticket.checked = !ticket.checked;
    });
    connection.on("NotifyTicketsToReleaseUpdated", function() {
        console.log("reload")
        window.location.reload();
    });

    const checkboxes = document.getElementsByClassName('checkboxCardInput');
    const checkedTickets = [];
    for (let checkbox of checkboxes) {
        const checked = checkbox.checked;
        if (checked) {
            const ticketId = checkbox.parentElement.getElementsByClassName('checkboxCardNumber')[0].textContent;
            checkedTickets.push(parseInt(ticketId.substring(1)));
        }
    }
    
    for (let checkbox of checkboxes) {
        checkbox.addEventListener('change', function () {
            const remove = !this.checked;
            const ticketId = this.parentElement.getElementsByClassName('checkboxCardNumber')[0].textContent;
            if (ticketId.startsWith(`S`)) {
                if (!remove && (checkedTickets.length === 0 ||
                    parseInt(ticketId.substring(1)) === checkedTickets[checkedTickets.length - 1] + 1)) {
                    checkedTickets.push(parseInt(ticketId.substring(1)))
                } else if (remove && (checkedTickets.length === 1 ||
                    parseInt(ticketId.substring(1)) === checkedTickets[checkedTickets.length - 1])) {
                    const index = checkedTickets.indexOf(parseInt(ticketId.substring(1)));
                    if (index > -1) {checkedTickets.splice(index, 1);}
                } else {
                    this.checked = !this.checked;
                    showMessage(`Нельзя выбирать стандартные тикеты не в порядке возрастания их номеров`);
                    return;
                }
            }
            
            console.log(ticketId);
            fetch("/@Model.GameSessionId/@Model.TeamId/api/update-release", {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ TicketId: ticketId, Remove: remove })
            }).then(function () {
                connection.invoke("UpdateTicketChoice", "@Model.GameSessionId", "@Model.TeamId", ticketId);
            });
        });
    }
</script>