@model WebApp.Models.DayStepModels.CfdTableStepModel

<div class="stepHeader">
    <h1 class="fs-1 text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

<div class="container3">
    <h1 class="title">Обновите диаграмму CFD</h1>
    <hr class="divider margin-bottom-20">

    <div class="mine_table">
        <div class="row-60 rowStyle1">
            <div class="rowName">
                <p class="text-center fs-6 text-top-margin">Работа аналитиков</p>
            </div>
            @if (Model.WithAnalysts.HasValue)
            {
                <input type="number" class="graphPageInput rowStyle1" placeholder="-" value="@Model.WithAnalysts.Value" id="with-analysts">
            }
            else
            {
                <input type="number" class="graphPageInput rowStyle1" placeholder="-" id="with-analysts">
            }
        </div>
        <div class="row-60 rowStyle2">
            <div class="rowName">
                <p class="text-center fs-6 text-top-margin">Работа разработчиков</p>
            </div>
            @if (Model.WithProgrammers.HasValue)
            {
                <input type="number" class="graphPageInput rowStyle2" placeholder="-" value="@Model.WithProgrammers.Value" id="with-programmers">
            }
            else
            {
                <input type="number" class="graphPageInput rowStyle2" placeholder="-" id="with-programmers">
            }
        </div>
        <div class="row-60 rowStyle3">
            <div class="rowName">
                <p class="text-center fs-6 text-top-margin">Работа тестировщиков</p>
            </div>

            @if (Model.WithTesters.HasValue)
            {
                <input type="number" class="graphPageInput rowStyle3" placeholder="-" value="@Model.WithTesters.Value" id="with-testers">
            }
            else
            {
                <input type="number" class="graphPageInput rowStyle3" placeholder="-" id="with-testers">
            }
        </div>
        <div class="row-60 rowStyle4">
            <div class="rowName">
                <p class="text-center fs-6 text-top-margin">Готовы к поставке</p>
            </div>

            @if (Model.ToDeploy.HasValue)
            {
                <input type="number" class="graphPageInput rowStyle4" placeholder="-" value="@Model.ToDeploy.Value" id="to-deploy">
            }
            else
            {
                <input type="number" class="graphPageInput rowStyle4" placeholder="-" id="to-deploy">
            }
        </div>
        <div class="row-60 rowStyle5">
            <div class="rowName">
                <p class="text-center fs-6 text-top-margin">Поставлено</p>
            </div>

            @if (Model.Released.HasValue)
            {
                <input type="number" class="graphPageInput rowStyle5" placeholder="-" value="@Model.Released.Value" id="released">
            }
            else
            {
                <input type="number" class="graphPageInput rowStyle5" placeholder="-" id="released">
            }
        </div>
    </div>

    <button class="stepControlButtons rightButton" id="save-cfd">
        <p class="fs-6">Сохранить</p>
    </button>
</div>

<script src="~/js/current-page-resolution.js"></script>
<script src="~/js/fetchJSON.js"></script>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module">
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");

    window.onload = async () => { await resolveCurrentPage(connection, `@Model.GameSessionId`, `@Model.TeamId`, `update-cfd`) };

    setRollbackEvent(connection);

    const invocation = async (rowId, value, valueName) => {
        const intValue = parseInt(value);
        if (intValue < 0) {
            showMessage(`Поля таблицы должны принимать неотрицательные значения`, MessageType.WARNING);
        } else if (value === null || value === undefined || value.length === 0) {
            showMessage(`Все поля таблицы должны быть заполнены значением 0 или больше`, MessageType.WARNING);
        } else {
            const day = await fetchPostJSON(`/@Model.GameSessionId/@Model.TeamId/api/update-cfd`, JSON.stringify({PatchType: valueName, Value: intValue}));
            if (day === null) {
                showMessage("Ошибка сервера при обновлении диаграммы.\nПопробуйте обновить страницу", MessageType.ERROR);
            } else {
                await connection.invoke(`CfdTableUpdate`, `@Model.GameSessionId`, `@Model.TeamId`, rowId, parseInt(value));
            }
        }
    };

    document.getElementById(`released`).addEventListener(`change`, () => {invocation(`released`, document.getElementById('released').value, `Released`)});
    document.getElementById(`to-deploy`).addEventListener(`change`, () => {invocation(`to-deploy`, document.getElementById('to-deploy').value, `ToDeploy`)});
    document.getElementById(`with-testers`).addEventListener(`change`, () => {invocation(`with-testers`, document.getElementById('with-testers').value, `WithTesters`)});
    document.getElementById(`with-programmers`).addEventListener(`change`, () => {invocation(`with-programmers`, document.getElementById('with-programmers').value, `WithProgrammers`)});
    document.getElementById(`with-analysts`).addEventListener(`change`, () => {invocation(`with-analysts`, document.getElementById('with-analysts').value, `WithAnalysts`)});

    connection.on(`NotifyCfdTableUpdated`, (rowId, value) => {
        document.getElementById(rowId).value = value;
    });
    
    document.getElementById('save-cfd').addEventListener('click', async () => {
        const released = document.getElementById('released').value;
        const toDeploy = document.getElementById('to-deploy').value;
        const withTesters = document.getElementById('with-testers').value;
        const withProgrammers = document.getElementById('with-programmers').value;
        const withAnalysts = document.getElementById('with-analysts').value;
        
        if (released === null || released === undefined || released.length === 0 || parseInt(released) < 0 ||
            toDeploy === null || toDeploy === undefined || toDeploy.length === 0 || parseInt(toDeploy) < 0 ||
            withTesters === null || withTesters === undefined || withTesters.length === 0 || parseInt(withTesters) < 0 ||
            withProgrammers === null || withProgrammers === undefined || withProgrammers.length === 0 || parseInt(withProgrammers) < 0 ||
            withAnalysts === null || withAnalysts === undefined || withAnalysts.length === 0 || parseInt(withAnalysts) < 0) {
            showMessage(`Все поля таблицы должны быть заполнены значением 0 или больше`, MessageType.WARNING);
            return;
        }
        
        const isValid = await fetchJSON(`/@Model.GameSessionId/@Model.TeamId/api/check-valid-cfd`);
        
        if (isValid === null) {
            showMessage("Ошибка сервера при сохранении данных.\nПопробуйте обновить страницу", MessageType.ERROR)
            return;
        }
        
        if (isValid) {
            await connection.invoke("ChangePage", "@Model.GameSessionId", "@Model.TeamId", 6, 1);
            window.location.href = `/@Model.GameSessionId/@Model.TeamId/step/6/1`;
        } else {
            showMessage(`Поля таблицы содержат невалидные значения. Кумулятивная диаграмма не может быть заполнена`, MessageType.WARNING);
        }
    });
</script>