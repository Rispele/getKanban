@using Core.Dtos.DayStatistics
@model WebApp.Models.DayStepModels.CfdGraphStepModel

@functions
{
    private void RenderDayResult()
    {
        var dayByNumber = Model.TeamStatistic.DayStatistics.ToDictionary(d => d.DayNumber);
        <div class="allDayResults">
            <div class="finishDayResult headerLineStyle text-center">
                <h1 class="fs-6">Итого</h1>
            </div>

            <div class="finishDayResultContainer">
                <div class="finishDayResult clientLineStyle">
                    <p class="fs-6">Всего клиентов: @Model.TeamStatistic.TotalClientsGained</p>
                </div>

                <div class="finishDayResult otherLineStyle">
                    <p class="fs-6">Штраф по клиентам составил: @Model.TeamStatistic.ClientsPenalty</p>
                </div>

                <div class="finishDayResult moneyLineStyle">
                    <p class="fs-6">Всего денег: @(Model.TeamStatistic.TotalProfitGained)$</p>
                </div>

                <div class="finishDayResult otherLineStyle">
                    <p class="fs-6">Штраф по деньгам составил: @(Model.TeamStatistic.Penalty)$</p>
                </div>
            </div>

            <div class="scrollable-container">
                <div class="finishDayResult headerLineStyle text-center">
                    <h1 class="fs-6">По дням</h1>
                </div>

                @foreach (var data in Model.TeamStatistic.DayStatistics.OrderByDescending(t => t.DayNumber))
                {
                    <div class="finishDayResult dayLineStyle text-center">
                        <h1 class="fs-6">День @data.DayNumber</h1>
                    </div>

                    <div class="finishDayResultContainer">
                        <div class="finishDayResult clientLineStyle">
                            <p class="fs-6">Получили клиентов: @data.ClientsGained</p>
                        </div>

                        @if (dayByNumber.TryGetValue(data.DayNumber - 1, out var prev) && prev.ProfitPerClient != data.ProfitPerClient)
                        {
                            <div class="finishDayResult otherLineStyle">
                                <p class="fs-6">Деньги за клиента: @(prev.ProfitPerClient)$ -> @(data.ProfitPerClient)$</p>
                            </div>
                        }
                        else
                        {
                            <div class="finishDayResult otherLineStyle">
                                <p class="fs-6">Деньги за клиента: @(data.ProfitPerClient)$</p>
                            </div>
                        }

                        <div class="finishDayResult moneyLineStyle">
                            <p class="fs-6">Получили денег: @(data.ProfitGained)$</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    private void RenderDiagram()
    {
        var dayStatistics = Model.TeamStatistic.DayStatistics;
        var maxDayNumber = dayStatistics.Select(t => t.DayNumber).Max();
        var rowsForCfd = new[]
            {
                "[\"День\", \"Поставлено\", \"Готово к поставке\", \"В тестировании\", \"В разработке\", \"В аналитике\"]",
                "[8,0,1,4,4,2]"
            }
            .Concat(dayStatistics.Select(CfdStatisticToString));
        var tableForCfd = $"[{string.Join(",", rowsForCfd)}]";

        var ticketsReleased = dayStatistics.SelectMany(d => d.TicketsReleased).ToArray();
        var rowsForControlDiagram = new[] { $"[\"Номер задачи\", \"За сколько поставили\"]{(ticketsReleased.Length > 0 ? "" : ", [0, 0]")}" }
            .Concat(ticketsReleased.Select((ticket, i) => $"[{i}, {ticket.releaseDay - ticket.takingDay}]"))
            .ToList();
        var tableForControlDiagram = $"[{string.Join(",", rowsForControlDiagram)}]";

        var ticketsCountPerWorkDaysCount = dayStatistics
            .SelectMany(d => d.TicketsReleased)
            .GroupBy(t => t.releaseDay!.Value - t.takingDay)
            .Select(t => (t.Key, t.Count()))
            .ToArray();
        var keys = ticketsCountPerWorkDaysCount.Select(t => t.Key).ToList();
        var maxWorkDays = keys.Count > 0 ? keys.Max() : 9;
        var rowsForDistributionDiagram = new[] { "[\"Дней в работе\"", $"\"Кол-во задач\"]{(ticketsCountPerWorkDaysCount.Length > 0 ? "" : ", [0, 0]")}" }
            .Concat(ticketsCountPerWorkDaysCount.Select(g => $"[{g.Key}, {g.Item2}]"));
        var tableForDistributionDiagram = $"[{string.Join(",", rowsForDistributionDiagram)}]";

        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawCharts);

    function drawCharts() {
        const dataForCfd = google.visualization.arrayToDataTable(@Html.Raw(tableForCfd));
        const optionsForCfd = {
            title: 'Кумулятивная диаграмма',
            hAxis: {title: 'День', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(8, Math.Max(18, maxDayNumber) - 7))}]"), minValue: 8, maxValue: @Math.Max(18, maxDayNumber) },
            vAxis: {minValue: 0},
            isStacked: true
        };

        const dataForControlDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForControlDiagram));
        const optionsForControlDiagram = {
            title: 'Контрольная диагамма',
            hAxis: {title: 'Поставленные задачи (в порядке релиза)', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, ticketsReleased.Length) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, ticketsReleased.Length)},
            vAxis: {title: 'За сколько поставили', minValue: 0},
            legend: { position: "none" },
        };

        const dataForDistributionDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForDistributionDiagram));
        const optionsForDistributionDiagram = {
            title: 'Распределение времени выполнения',
            hAxis: {title: 'За сколько поставили', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, maxWorkDays) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, maxWorkDays)},
            vAxis: {title: 'Кол-во поставленных задач', minValue: 0},
            legend: { position: "none" },
        };

        const cfdChart = new google.visualization.AreaChart(document.getElementById('cfd'));
        cfdChart.draw(dataForCfd, optionsForCfd);

        const controlChar = new google.visualization.AreaChart(document.getElementById('control-diagram'));
        controlChar.draw(dataForControlDiagram, optionsForControlDiagram);

        const distributionDiagram = new google.visualization.ColumnChart(document.getElementById('distribution-diagram'));
        distributionDiagram.draw(dataForDistributionDiagram, optionsForDistributionDiagram);
    }
</script>
    }

    private static string CfdStatisticToString(DayStatisticDto t)
    {
        return $"[{t.DayNumber}," +
               $"{t.CfdStatistic.Released}," +
               $"{t.CfdStatistic.ToDeploy}," +
               $"{t.CfdStatistic.WithTesters}," +
               $"{t.CfdStatistic.WithProgrammers}," +
               $"{t.CfdStatistic.WithAnalysts}]";
    }
}

<div style="width: 100%; height: 100vh; position: absolute; top: 0; left: 0;">
    <div class="firework" style="left: 100px; top: 200px; animation-delay: 0.5s;">
        <div class="spark" style="--dx: 50; --dy: -100; background: red;"></div>
        <div class="spark" style="--dx: -50; --dy: -100; background: yellow;"></div>
        <div class="spark" style="--dx: 100; --dy: 50; background: green;"></div>
        <div class="spark" style="--dx: -100; --dy: 50; background: blue;"></div>
    </div>

    <div class="firework" style="right: 100px; top: 240px; animation-delay: 0.5s;">
        <div class="spark" style="--dx: 50; --dy: -100; background: red;"></div>
        <div class="spark" style="--dx: -50; --dy: -100; background: yellow;"></div>
        <div class="spark" style="--dx: 100; --dy: 50; background: green;"></div>
        <div class="spark" style="--dx: -100; --dy: 50; background: blue;"></div>
    </div>

    <div class="firework" style="right: 400px; top: 560px; animation-delay: 0.5s;">
        <div class="spark" style="--dx: 50; --dy: -100; background: red;"></div>
        <div class="spark" style="--dx: -50; --dy: -100; background: pink;"></div>
        <div class="spark" style="--dx: 100; --dy: 50; background: purple;"></div>
        <div class="spark" style="--dx: -100; --dy: 50; background: lightcoral;"></div>
    </div>

    <!-- Firework 2 -->
    <div class="firework" style="left: 300px; top: 400px; animation-delay: 1s;">
        <div class="spark" style="--dx: 70; --dy: -120; background: pink;"></div>
        <div class="spark" style="--dx: -70; --dy: -120; background: cyan;"></div>
        <div class="spark" style="--dx: 110; --dy: 60; background: orange;"></div>
        <div class="spark" style="--dx: -110; --dy: 60; background: purple;"></div>
    </div>

    <!-- Confetti -->
    <div class="confetti" style="left: 75px; --hue: 0.1; animation-delay: 0.2s;"></div>
    <div class="confetti" style="left: 25px; --hue: 0.5; animation-delay: 0.4s;"></div>
    <div class="confetti" style="left: 118px; --hue: 0.8; animation-delay: 0.6s;"></div>
    <div class="confetti" style="left: 579px; --hue: 0.3; animation-delay: 0.8s;"></div>
    <div class="confetti" style="left: 250px; --hue: 0.8; animation-delay: 0.6s;"></div>
    <div class="confetti" style="left: 400px; --hue: 0.5; animation-delay: 0.4s;"></div>
    <div class="confetti" style="left: 350px; --hue: 0.3; animation-delay: 0.8s;"></div>
</div>

<div class="container8 centered-25">
    <h1 class="title">Итоги игры!</h1>
    <hr class="divider margin-bottom-20">
    <div class="diagram-container">
        <div class="diagram" id="cfd"></div>
        <div class="diagram" id="control-diagram"></div>
        <div class="diagram" id="distribution-diagram"></div>
    </div>
    @{ RenderDayResult(); }
</div>
@{
    RenderDiagram();
}

<button class="stepControlButtons rightButton" id="next">
    Выйти в меню
</button>

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script type="module">
    const connection = new signalR.HubConnectionBuilder().withUrl(`/lobbyHub`).build();
    
    document.getElementById(`next`).addEventListener(`click`, () => {
        window.location.href = `/`;
    });
</script>
