@model WebApp.Models.DayStepModels.GameResultModel

@{
    var clientSorted = Model.TeamResultModels.OrderByDescending(x => x.ClientsCount).ToArray();
    var clientWinnerTeamId = clientSorted[0].ClientsCount != clientSorted[1].ClientsCount ? clientSorted[0].TeamId : Guid.Empty;
    var moneySorted = Model.TeamResultModels.OrderByDescending(x => x.MoneyCount).ToArray();
    var moneyWinnerTeamId = moneySorted[0].MoneyCount != moneySorted[1].MoneyCount ? moneySorted[0].TeamId : Guid.Empty;

    string GetTeamClassName(Guid teamId) =>
        (clientWinnerTeamId == teamId, moneyWinnerTeamId == teamId) switch
        {
            ((true, true)) => "finalMegaWinner",
            ((true, false)) => "finalClientWinnerStyle",
            ((false, true)) => "finalMoneyWinnerStyle",
            ((false, false)) => "finalLooserStyle"
        };
}

<div class="container7"></div>

<button class="stepControlButtons rightButton" id="next">
    Выйти в меню
</button>

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script type="module">
    showWaitMessage(@Model.TeamResultModels.Where(x => x.IsTeamSessionEnded).ToList().Count);
    
    const connection = new signalR.HubConnectionBuilder().withUrl(`/lobbyHub`).build();
    
    const finishedTeams = @(
                          Html.Raw(
                              Json.Serialize(
                                  Model.TeamResultModels
                                      .Where(x => x.IsTeamSessionEnded)
                                      .Select(x => x.TeamId))));
        
    function showWaitMessage(finishedTeamsCount) {
        const container = document.getElementsByClassName(`container7`)[0];
        container.innerHTML = ``;
        
        const waitMessage = document.createElement(`p`);
        waitMessage.textContent = `Ожидаем завершения игры всеми командами...`;
        const teamsToWaitMessage = document.createElement(`p`);
        teamsToWaitMessage.textContent = `Команд, завершивших игру: ${finishedTeamsCount}/@Model.TeamResultModels.Count`;
        
        container.appendChild(waitMessage);
        container.appendChild(teamsToWaitMessage);
    }
    
    function tryBuildResultElements() {
        if (finishedTeams.length === @Model.TeamResultModels.Count) {
            
            const container = document.getElementsByClassName(`container7`)[0];
            container.innerHTML = ``;
            @{ var i = 0; }
            @foreach (var teamResult in Model.TeamResultModels)
            {
                <text>
                let finalCommandContainer@(i) = document.createElement(`div`);
                finalCommandContainer@(i).className = `finalCommandContainer`;

                let finalCommandResult@(i) = document.createElement(`div`);
                finalCommandResult@(i).className = `finalCommandResult`;

                let finalCommand@(i) = document.createElement(`div`);
                finalCommand@(i).className = `finalCommand @Html.Raw(GetTeamClassName(teamResult.TeamId))`;
                let teamName@(i) = document.createElement(`h`);
                teamName@(i).className = `fs-5 fw-bold text-center`;
                teamName@(i).textContent = `@Html.Raw(teamResult.TeamName)`;
                let clientsCount@(i) = document.createElement(`h`);
                clientsCount@(i).className = `fs-6 fw-normal text-center`;
                clientsCount@(i).textContent = `Клиенты: @teamResult.ClientsCount`;
                let moneyCount@(i) = document.createElement(`h`);
                moneyCount@(i).className = `fs-6 fw-normal text-center`;
                moneyCount@(i).textContent = `Деньги: @teamResult.MoneyCount`;

                finalCommand@(i).appendChild(teamName@(i));
                finalCommand@(i).appendChild(clientsCount@(i));
                finalCommand@(i).appendChild(moneyCount@(i));
                finalCommandContainer@(i).appendChild(finalCommandResult@(i));
                finalCommandContainer@(i).appendChild(finalCommand@(i));
                container.appendChild(finalCommandContainer@(i));
                @{
                i++;
                }
                </text>
            }
        }
    }

    connection.on(`NotifyResult`, (teamId) => {
        if (finishedTeams.indexOf(teamId) < 0) {
            finishedTeams.push(teamId);
        }
        showWaitMessage(finishedTeams.length);
        tryBuildResultElements();
    });
    
    await connection.start();
    await connection.invoke(`ConnectExplicit`, `@Model.SessionId`);
    @if (Model.TeamResultModels.Single(x => x.TeamId == Model.RequesterTeamId).IsTeamSessionEnded)
    {
        <text>
        await connection.invoke(`TeamGameResultReveal`, `@Model.SessionId`, `@Model.RequesterTeamId`);
        </text>
    }
    
    document.getElementById(`next`).addEventListener(`click`, () => {
        window.location.href = `/`;
    });
</script>