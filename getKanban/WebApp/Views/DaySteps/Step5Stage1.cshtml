@using Domain.Game
@model WebApp.Models.DayStepModels.TicketChoiceStepModel

<div class="stepHeader">
    <h1 class="fs-1 text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

@functions
{
    private void FillTickets(IEnumerable<Ticket> tickets, string cardStyle, string containerName)
    {
        <div class="@Html.Raw($"checkboxContainer{Model.PageType}Version")">
            <div class="textContainer">
                <h1 class="title">@containerName</h1>
            </div>
            <hr class="divider">

            @foreach (var ticket in tickets)
            {
                var ticketId = ticket.id;
                <div class="checkboxCardsMargin">
                    <input type="checkbox" class="checkboxCardInput" id="@ticketId" checked="@ticket.IsTaken(Model.DayNumber)">
                    <label for="@ticketId" class="checkboxCardContainer @cardStyle cursorPointer">
                        <div class="checkboxCardContent">
                            <h2 class="checkboxCardNumber">@ticketId</h2>
                            <div class="lines">
                                <div class="line full"></div>
                                <div class="line half"></div>
                                <div class="line half"></div>
                            </div>
                        </div>
                    </label>
                </div>
            }
        </div>
    }
}

<div class="container1">
    <h1 class="title">Выберите тикеты, которые были сегодня взяты в очередь</h1>
    <hr class="divider">
    <div class="container2">

        @if (Model.TicketIds.Any(x => x.id.Contains("S")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("S")),
                "checkboxCardStyle1",
                "Обычные");
        }

        @if (Model.TicketIds.Any(x => x.id.Contains("I")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("I")),
                "checkboxCardStyle2",
                "Инфраструктурные");
        }

        @if (Model.TicketIds.Any(x => x.id.Contains("E") || x.id.Contains("F")))
        {
            FillTickets(
                Model.TicketIds.Where(x => x.id.Contains("E") || x.id.Contains("F")),
                "checkboxCardStyle3",
                "Срочные");
        }
    </div>

    <button class="stepControlButtons rightButton" id="prev">
        Назад
    </button>

    <button class="stepControlButtons rightButton" id="next">
        Далее
    </button>
</div>

<script src="~/js/fetchJSON.js"></script>
<script src="~/js/value-helper.js"></script>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");
    setSwitchEvent("prev", connection, "@Model.GameSessionId", "@Model.TeamId", 5, 0);
    setSwitchEvent("next", connection, "@Model.GameSessionId", "@Model.TeamId", 5, 2);
    setRollbackEvent(connection);
    
    connection.on("NotifyTicketTakenToSpringBacklog", (ticketId) => {
        const ticket = document.getElementById(ticketId);
        ticket.checked = !ticket.checked;
    });

    const checkboxes = document.getElementsByClassName('checkboxCardInput');
    const checkedTickets = [];
    let minTicketId = 10000;
    for (let checkbox of checkboxes) {
        const ticketId = checkbox.parentElement.getElementsByClassName('checkboxCardNumber')[0].textContent;
        if (ticketId.startsWith(`S`)) {
            minTicketId = Math.min(minTicketId, parseInt(ticketId.substring(1)));
            const checked = checkbox.checked;
            if (checked) {
                checkedTickets.push(parseInt(ticketId.substring(1)));
            }
        }
    }
    
    for (let checkbox of checkboxes) {
        checkbox.addEventListener('change', async () => {
            const remove = !checkbox.checked;
            const ticketId = checkbox.parentElement.getElementsByClassName('checkboxCardNumber')[0].textContent;
            if (ticketId.startsWith(`S`)) {
                const ticketIdNumber = parseInt(ticketId.substring(1));
                if (checkedTickets.length === 0 && ticketIdNumber === minTicketId) {
                    checkedTickets.push(ticketIdNumber)
                } else if (!remove && ticketIdNumber === checkedTickets[checkedTickets.length - 1] + 1) {
                    checkedTickets.push(ticketIdNumber)
                } else if (remove && (checkedTickets.length === 1 ||
                    ticketIdNumber === checkedTickets[checkedTickets.length - 1])) {
                    const index = checkedTickets.indexOf(ticketIdNumber);
                    if (index > -1) {checkedTickets.splice(index, 1);}
                } else {
                    checkbox.checked = !checkbox.checked;
                    showMessage(`Нельзя выбирать стандартные тикеты не в порядке возрастания их номеров.\nПозволяется начать выбор только с тикета с наименьшим номером`, MessageType.ERROR);
                    return;
                }
            }
            
            console.log(ticketId);
            const updated = await fetchPostJSON("/@Model.GameSessionId/@Model.TeamId/api/update-sprint-backlog",
                JSON.stringify({ ticketId: ticketId, remove: remove }));
            if (!hasValue(updated) || !updated) {
                checkbox.checked = !checkbox.checked;
                showMessage(`Ошибка сервера при выборе тикета`, MessageType.ERROR);
                return;
            }
            await connection.invoke("NotifyTicketTakenToSpringBacklog", "@Model.GameSessionId", "@Model.TeamId", ticketId);
        });
    }
</script>