@model Core.Dtos.TicketsViewDto

<div class="container1">
    <h1 class="title">Выберите тикеты, которые были сегодня взяты в очередь</h1>
    <hr class="divider">
    <div class="container2">

        @if (Model.TicketIds.Any(x => x.Contains("S")))
        {
        <div class="@Html.Raw($"checkboxContainer{Model.PageType}Version")">
            <h1 class="title">Обычные</h1>
            <hr class="divider">

            @foreach (var defaultTicket in Model.TicketIds.Where(x => x.Contains("S")))
            {
            <div class="checkboxCardsMargin">
                <input type="checkbox" class="checkboxCardInput" id="@defaultTicket">
                <label for="@defaultTicket" class="checkboxCardContainer checkboxCardStyle1 cursorPointer">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">@defaultTicket</h2>
                        <div class="lines">
                            <div class="line full"></div>
                            <div class="line half"></div>
                            <div class="line half"></div>
                        </div>
                    </div>
                </label>
            </div>
            }
        </div>
        }

        @if (Model.TicketIds.Any(x => x.Contains("I")))
        {
        <div class="@Html.Raw($"checkboxContainer{Model.PageType}Version")">
            <h1 class="title">Инфраструктурные</h1>
            <hr class="divider">

            @foreach (var infrTicket in Model.TicketIds.Where(x => x.Contains("I")))
            {
            <div class="checkboxCardsMargin">
                <input type="checkbox" class="checkboxCardInput" id="@infrTicket">
                <label for="@infrTicket" class="checkboxCardContainer checkboxCardStyle2 cursorPointer">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">@infrTicket</h2>
                        <div class="lines">
                            <div class="line full"></div>
                            <div class="line half"></div>
                            <div class="line half"></div>
                        </div>
                    </div>
                </label>
            </div>
            }

        </div>
        }

        @if (Model.TicketIds.Any(x => x.Contains("E") || x.Contains("F")))
        {
        <div class="@Html.Raw($"checkboxContainer{Model.PageType}Version")">
            <h1 class="title">Срочные</h1>
            <hr class="divider">

            @foreach (var fastTicket in Model.TicketIds.Where(x => x.Contains("E") || x.Contains("F")))
            {
            <div class="checkboxCardsMargin">
                <input type="checkbox" class="checkboxCardInput" id="@fastTicket">
                <label for="@fastTicket" class="checkboxCardContainer checkboxCardStyle3 cursorPointer">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">@fastTicket</h2>
                        <div class="lines">
                            <div class="line full"></div>
                            <div class="line half"></div>
                            <div class="line half"></div>
                        </div>
                    </div>
                </label>
            </div>
            }
        </div>
        }
    </div>
    
    <button class="stepControlButtons rightButton" id="prev">
        Назад
    </button>

    <button class="stepControlButtons rightButton" id="next">
        Далее
    </button>
</div>

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/lobbyHub").build();
    connection.start();
    connection.on("NotifyPageChange", function (page, stage) {
        window.location.href = `/step/${page}/${stage}`;
    });
    connection.on("NotifyUpdateTicketChoice", function (ticketId) {
        const ticket = document.getElementById(ticketId);
        ticket.checked = !ticket.checked;
    });

    const checkboxes = document.getElementsByClassName('checkboxCardInput');
    for (let checkbox of checkboxes) {
        checkbox.addEventListener('change', function () {
            const remove = !this.checked;
            const ticketId = this.parentElement.getElementsByClassName('checkboxCardNumber')[0].textContent;
            console.log(ticketId);
            fetch("/step/update-sprint-backlog", {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ ticketId: ticketId, remove: remove })
            }).then(function () {
                connection.invoke("UpdateTicketChoice", "@Model.SessionId", ticketId);
            });
        });
    }

    document.getElementById("prev").addEventListener('click', function () {
        connection.invoke("ChangePage", "@Model.SessionId", 5, 0)
            .then(function () {
                window.location.href = `/step/5`;
            });
    });
    document.getElementById("next").addEventListener('click', function () {
        connection.invoke("ChangePage", "@Model.SessionId", 5, 2)
            .then(function () {
                window.location.href = `/step/5/2`;
            });
    });
</script>