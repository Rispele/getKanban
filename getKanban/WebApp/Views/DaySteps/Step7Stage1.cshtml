@model WebApp.Models.DayStepModels.FinishGameStepModel

<div class="stepHeader">
    <h1 class="fs-1 text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

<div class="infoContainer height-small centered-100 creative-border-5 creative-border-rad-50">
    <h1 class="fs-4 text-center">
        @if (Model.DayNumber == 12)
        {
            @:@Model.DayNumber день позади. Это окончание платежного цикла.
        }
        else
        {
            @:@Model.DayNumber день позади
        }
    </h1>

    <div class="info height-small centered-50">
        @foreach (var par in Model.EndDayEventMessage.Split("\n"))
        {
            <p class="fs-5 fw-normal">@Html.Raw(par)</p>
        }
        <p class="fs-5 fw-normal">@Html.Raw("Пришло время поменять WIP.")</p>
    </div>
</div>

<button class="stepControlButtons leftButton" id="prev">
    Назад
</button>

@if (Model.IsLastDay)
{
    <button class="stepControlButtons rightButton" id="finish-game">
        Закончить игру
    </button>
}
else
{
    <button class="stepControlButtons rightButton" id="next-day">
        Следующий день
    </button>
}

<script src="~/js/current-page-resolution.js"></script>
<script src="~/js/fetchJSON.js"></script>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module">
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");

    await resolveCurrentPage(connection, `@Model.GameSessionId`, `@Model.TeamId`, `end-day`);

    setSwitchEvent("prev", connection, "@Model.GameSessionId", "@Model.TeamId", 7, 0);
    setRollbackEvent(connection);
    
    connection.on(`NotifyGameFinished`, (sessionId, teamId) => {
        window.location.href = `/${sessionId}/${teamId}/step/game-result`;
    });
    
    if (@((!Model.IsLastDay).ToString().ToLower())) {
        const nextDayButton = document.getElementById("next-day");
        if (nextDayButton !== null && nextDayButton !== undefined) {
            nextDayButton.addEventListener('click', async () => {
                const day = await fetchPostJSON(`/@Model.GameSessionId/@Model.TeamId/api/end-day`);
                if (day === null) {
                    showMessage("Ошибка сервера при завершении дня.\nПопробуйте обновить страницу", MessageType.ERROR)
                    return;
                }
                await connection.invoke("FinishDay", "@Model.GameSessionId", "@Model.TeamId");
                await connection.invoke("ChangePage", "@Model.GameSessionId", "@Model.TeamId", 1, 0)
                window.location.href = `/@Model.GameSessionId/@Model.TeamId/step/1`;
            });
        }
    } else {
        const finishGameButton = document.getElementById("finish-game");
        if (finishGameButton !== null && finishGameButton !== undefined) {
            finishGameButton.addEventListener('click', async () => {
                const day = await fetchPostJSON(`/@Model.GameSessionId/@Model.TeamId/api/end-day`);
                if (day === null) {
                    showMessage("Ошибка сервера при завершении игры.\nПопробуйте обновить страницу", MessageType.ERROR)
                    return;
                }
                await connection.invoke("ShowGameResult", "@Model.GameSessionId", "@Model.TeamId")
                window.location.href = `/@Model.GameSessionId/@Model.TeamId/step/game-result`;
            });
        }
    }
</script>