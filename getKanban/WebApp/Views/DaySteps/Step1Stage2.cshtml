@using Core.Dtos.Containers.TeamMembers
@model (Guid? currentSessionId, List<Core.Dtos.Containers.TeamMemberDto> teamMemberDtos)

<meta charset="UTF-8">
<div class="table-container">
    <table>
        <thead>
        <tr>
            <th class="height-extra-small fs-5">За аналитиков</th>
            <th class="height-extra-small fs-5">За разработчиков</th>
            <th class="height-extra-small fs-5">За тестировщиков</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td class="dropzone" id="Analyst">
                @foreach (var analyst in Model.teamMemberDtos.Where(x => x.InitialRole == TeamRoleDto.Analyst))
                {
                    <div class="draggable" draggable="true" id="@analyst.Id">
                        <div class="textContainer">
                            <div class="text fs-6 fw-bolder">Аналитик</div>
                            <div class="lines">
                                <div class="line full"></div>
                                <div class="line half"></div>
                            </div>
                        </div>
                    </div>
                }
            </td>
            <td class="dropzone" id="Programmer">
                @foreach (var programmer in Model.teamMemberDtos.Where(x => x.InitialRole == TeamRoleDto.Programmer))
                {
                    <div class="draggable" draggable="true" id="@programmer.Id">
                        <div class="textContainer">
                            <div class="text fs-6 fw-bolder">Разработчик</div>
                            <div class="lines">
                                <div class="line full"></div>
                                <div class="line half"></div>
                            </div>
                        </div>
                    </div>
                }
            </td>
            <td class="dropzone" id="Tester">
                @foreach (var tester in Model.teamMemberDtos.Where(x => x.InitialRole == TeamRoleDto.Tester))
                {
                    <div class="draggable" draggable="true" id="@tester.Id">
                        <div class="textContainer">
                            <div class="text fs-6 fw-bolder">Тестировщик</div>
                            <div class="lines">
                                <div class="line full"></div>
                                <div class="line half"></div>
                            </div>
                        </div>
                    </div>
                }
            </td>
        </tr>
        </tbody>
    </table>
</div>

<button class="stepControlButtons position-relative rightButton" id="roll">
    <p class="fs-6">Бросить кубики</p>
</button>

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/lobbyHub").build();
    connection.start();
    connection.on("NotifyPageChange", function (page, stage) {
        window.location.href = `/step/${page}/${stage}`;
    });
    connection.on("NotifyUpdateRole", function (teamMemberId, roleTo) {
        const draggable = document.getElementById(teamMemberId.toString());
        document.getElementById(roleTo).appendChild(draggable);
    });
    
    const draggables = document.getElementsByClassName('draggable');
    for (let draggable of draggables) {
        draggable.addEventListener('dragend', function () {
            const teamMemberId = draggable.id;
            const roleTo = draggable.parentElement.id.toString();
            fetch("/step/save-roles-transformation", {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify([teamMemberId, roleTo])
            }).then(function () {
                connection.invoke("UpdateRole", "@Model.currentSessionId", parseInt(teamMemberId), roleTo);
            });
        });
    }

    document.getElementById("roll").addEventListener('click', function () {
        fetch(`/step/roll`).then(function () {
            connection.invoke("ChangePage", "@Model.currentSessionId", 2, 0)
                .then(function () {
                    window.location.href = "/step/2";
                });
        });
    });

    function translateRole(role) {
        return role === "Аналитик"
            ? "Analyst"
            : role === "Разработчик"
                ? "Programmer"
                : role === "Тестировщик"
                    ? "Tester"
                    : null;
    }

</script>
