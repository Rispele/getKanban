@using Core.Dtos.Containers.TeamMembers
@model WebApp.Models.DayStepModels.RoleUpdateStepModel

<div class="stepHeader">
    <h1 class="fs-1 text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

<h1 class="title centered-50">Измените распределение членов команды по функциям</h1>
<h1 class="title">Имейте в виду, что член команды не в своей роли работает хуже</h1>
<div class="divider"></div>

<div class="table-container">
    <table>
        <thead>
        <tr>
            <th class="height-extra-small fs-5">За аналитиков</th>
            <th class="height-extra-small fs-5">За разработчиков</th>
            <th class="height-extra-small fs-5">За тестировщиков</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            @foreach (var role in new[] { TeamRoleDto.Analyst, TeamRoleDto.Programmer, TeamRoleDto.Tester })
            {
                <td class="dropzone" id="@Html.Raw(role.ToString())">
                    @foreach (var member in Model.TeamMemberDtos.Where(x => x.CurrentRole == role))
                    {
                        var t = member.InitialRole switch
                        {
                            TeamRoleDto.Analyst => "creative-border-2",
                            TeamRoleDto.Programmer => "creative-border-3",
                            TeamRoleDto.Tester => "creative-border-5"
                        };

                        <div class="draggable @t creative-border-rad-20" draggable="true" id="@member.Id">
                            <div class="rolesTextContainer">
                                <div class="text fs-6 fw-bolder">
                                    @{
                                        switch (member.InitialRole)
                                        {
                                            case TeamRoleDto.Analyst:
                                                <text>Аналитик</text>
                                                break;
                                            case TeamRoleDto.Programmer:
                                                <text>Разработчик</text>
                                                break;
                                            case TeamRoleDto.Tester:
                                                <text>Тестировщик</text>
                                                break;
                                        }
                                    }
                                </div>
                                <div class="lines">
                                    <div class="line full"></div>
                                    <div class="line half"></div>
                                </div>
                            </div>
                        </div>
                    }
                </td>
            }
        </tr>
        </tbody>
    </table>
</div>

<button class="stepControlButtons rightButton" id="roll">
    <p class="fs-6">Бросить кубики</p>
</button>

<script src="~/js/current-page-resolution.js"></script>
<script src="~/js/fetchJSON.js"></script>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module">
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");

    await resolveCurrentPage(connection, `@Model.GameSessionId`, `@Model.TeamId`, `roll`);
    
    setRollbackEvent(connection);
    
    document.getElementById("roll").addEventListener('click', async () => {
        const roll = await fetchJSON(`/@Model.GameSessionId/@Model.TeamId/api/roll`);
        if (roll === null) {
            showMessage("Ошибка сервера при броске кубика.\nПопробуйте обновить страницу", MessageType.ERROR)
            return;
        }
        await connection.invoke("ChangePage", "@Model.GameSessionId", "@Model.TeamId", 2, 0);
        window.location.href = `/@Model.GameSessionId/@Model.TeamId/step/2/0`;
    });
        
    connection.on("NotifyUpdateRole", (teamMemberId, roleTo) => {
        const draggable = document.getElementById(teamMemberId.toString());
        document.getElementById(roleTo).appendChild(draggable);
    });
    
    const testerMemberIds = @Html.Raw(Json.Serialize(Model.TeamMemberDtos.Where(x => x.CurrentRole == TeamRoleDto.Tester).Select(x => x.Id.ToString())));
    const shouldLockTesters = await fetchJSON(`/@Model.GameSessionId/@Model.TeamId/api/should-lock-testers`);
    
    const draggables = document.getElementsByClassName('draggable');
    for (let draggable of draggables) {
        draggable.addEventListener('dragend', async () => {
            const teamMemberId = draggable.id;
            const roleTo = draggable.parentElement.id.toString();
            if (shouldLockTesters && (testerMemberIds.indexOf(teamMemberId) >= 0 || roleTo === `Tester`)) {
                showMessage(`В этот день тестировщики не могут менять свою роль и другие роли не могут меняться на роль тестировщиков`, MessageType.ERROR);
            } else {
                const day = await fetchPostJSON("/@Model.GameSessionId/@Model.TeamId/api/save-roles-transformation", JSON.stringify({teamMemberId: teamMemberId, roleTo: roleTo}));
                if (day === null) {
                    showMessage("Ошибка сервера при обновлении ролей.\nПопробуйте обновить страницу", MessageType.ERROR);
                } else {
                    await connection.invoke("UpdateRole", "@Model.GameSessionId", "@Model.TeamId", parseInt(teamMemberId), roleTo);
                }
            }
        });
    }
</script>