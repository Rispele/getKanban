@using Core.Dtos.DayStatistics
@model WebApp.Models.DayStepModels.CfdGraphStepModel

<div class="stepHeader">
    <h1 class="fs-1 fw- text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

@* @{ *@
@*     CollectCfdStatisticPerStep(d => d.CfdStatistic.WithAnalysts, "Аналитики"); *@
@*     CollectCfdStatisticPerStep(d => d.CfdStatistic.WithProgrammers, "Разработчики"); *@
@*     CollectCfdStatisticPerStep(d => d.CfdStatistic.WithTesters, "Тестировщики"); *@
@*     CollectCfdStatisticPerStep(d => d.CfdStatistic.ToDeploy, "Готово к поставке"); *@
@*     CollectCfdStatisticPerStep(d => d.CfdStatistic.Released, "Поставлено"); *@
@* } *@

@functions
{
    @* private void CollectCfdStatisticPerStep(Func<DayStatisticDto, int> getter, string groupName) *@
    @* { *@
    @*     <p>@groupName - - - @string.Join(" ", Model.TeamStatistic.DayStatistics.Select(getter))</p> *@
    @* } *@

    private void RenderGraph()
    {
        var rows = new [] {"[8,2,4,4,1,0]"}.Concat(Model.TeamStatistic.DayStatistics.Select(CfdStatisticToString));
        var table = $"[{string.Join(",", rows)}]";
        <script type="text/javascript">
            const graphBlock = document.getElementById("graphdiv3");
            const data = @table;
            console.log(data);
            const options = {
                stackedGraph: true,
                labels: ["День", "В аналитике", "В разработке", "В тестировании", "Готово к поставке", "Поставлено"],
                dateWindow : [8, 22],
                
                highlightCircleSize: 2,
                strokeWidth: 1,

                highlightSeriesOpts: {
                    strokeWidth: 3,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                }
            };

            Dygraph.onDOMready(function onDOMready() {
                const g3 = new Dygraph(graphBlock, data, options);
            });
        </script>
    }
}
@functions {
    private static string CfdStatisticToString(DayStatisticDto t)
    {
        return $"[{t.DayNumber}," +
               $"{t.CfdStatistic.WithAnalysts}," +
               $"{t.CfdStatistic.WithProgrammers}," +
               $"{t.CfdStatistic.WithTesters}," +
               $"{t.CfdStatistic.ToDeploy}," +
               $"{t.CfdStatistic.Released}]";
    }
}


<script type="text/javascript" src="~/js/dygraph/dygraph.min.js">
        
        </script>
<link rel="stylesheet" type="text/css" href="~/css/dygraph.min.css"/>

<div id="graphdiv3" style="width:500px; height:300px;"></div>
@{ RenderGraph(); }
<button class="stepControlButtons position-relative rightButton" id="next">
    <p class="fs-6">Далее</p>
</button>

<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");
    setSwitchEvent("next", connection, "@Model.GameSessionId", "@Model.TeamId", 7, 0);
    setRollbackEvent(connection);
</script>