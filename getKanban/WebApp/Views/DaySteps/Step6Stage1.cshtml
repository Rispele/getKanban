@using Core.Dtos.DayStatistics
@model WebApp.Models.DayStepModels.CfdGraphStepModel

<div class="stepHeader">
    <h1 class="fs-1 fw- text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

@functions
{
    private void RenderDayResult()
    {
        var dayByNumber = Model.TeamStatistic.DayStatistics.ToDictionary(d => d.DayNumber);
        <div class="scrollable-container" style="position: absolute; right: 0;">
            @foreach (var data in Model.TeamStatistic.DayStatistics.OrderByDescending(t => t.DayNumber))
            {
                <div class="finishDayResult dayLineStyle text-center">
                    <h1 class="fs-6">День @data.DayNumber</h1>
                </div>

                <div class="finishDayRe sultContainer">
                    <div class="finishDayResult">
                        <p class="fs-6">Получили клиентов: @data.ClientsGained</p>
                    </div>

                    @if (dayByNumber.TryGetValue(data.DayNumber - 1, out var prev) && prev.ProfitPerClient != data.ProfitPerClient)
                    {
                        <div class="finishDayResult monetChangeLineStyle">
                            <p class="fs-6">Деньги за клиента: @(prev.ProfitPerClient)$ -> @(data.ProfitPerClient)$</p>
                        </div>
                    }
                    else
                    {
                        <div class="finishDayResult monetChangeLineStyle">
                            <p class="fs-6">Деньги за клиента: @(data.ProfitPerClient)$</p>
                        </div>
                    }

                    <div class="finishDayResult">
                        <p class="fs-6">Получили денег: @(data.ProfitGained)$</p>
                    </div>
                </div>
            }
        </div>
    }

    private void RenderDiagram()
    {
        var dayStatistics = Model.TeamStatistic.DayStatistics;
        var maxDayNumber = dayStatistics.Select(t => t.DayNumber).Max();
        var rowsForCfd = new[]
            {
                "[\"День\", \"Поставлено\", \"Готово к поставке\", \"В тестировании\", \"В разработке\", \"В аналитике\"]",
                "[8,0,1,4,4,2]"
            }
            .Concat(dayStatistics.Select(CfdStatisticToString));
        var tableForCfd = $"[{string.Join(",", rowsForCfd)}]";

        var ticketsReleased = dayStatistics.SelectMany(d => d.TicketsReleased).ToArray();
        var rowsForControlDiagram = new[] { "[\"Номер задачи\"", "\"За сколько поставили\"]" }
            .Concat(ticketsReleased.Select((ticket, i) => $"[{i}, {ticket.releaseDay - ticket.takingDay}]"));
        var tableForDiagram = $"[{string.Join(",", rowsForControlDiagram)}]";

        var ticketsCountPerWorkDaysCount = dayStatistics
            .SelectMany(d => d.TicketsReleased)
            .GroupBy(t => t.releaseDay!.Value - t.takingDay)
            .Select(t => (t.Key, t.Count()))
            .ToArray();
        var keys = ticketsCountPerWorkDaysCount.Select(t => t.Key).ToList();
        var maxWorkDays = keys.Count > 0 ? keys.Max() : 9;
        var rowsForDistributionDiagram = new[] { "[\"Дней в работе\"", "\"Кол-во задач\"]" }
            .Concat(ticketsCountPerWorkDaysCount.Select(g => $"[{g.Key}, {g.Item2}]"));
        var tableForDistributionDiagram = $"[{string.Join(",", rowsForDistributionDiagram)}]";

        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
          google.charts.load('current', {'packages':['corechart']});
          google.charts.setOnLoadCallback(drawCharts);

          function drawCharts() {
            const dataForCfd = google.visualization.arrayToDataTable(@Html.Raw(tableForCfd));
            const optionsForCfd = {
              title: 'Кумулятивная диаграмма',
              hAxis: {title: 'День', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(8, Math.Max(18, maxDayNumber) - 7))}]"), minValue: 8, maxValue: @Math.Max(18, maxDayNumber) },
              vAxis: {minValue: 0},
              isStacked: true
            };

            const dataForControlDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForDiagram));
            const optionsForControlDiagram = {
                title: 'Контрольная диагамма',
                hAxis: {title: 'Поставленные задачи (в порядке релиза)', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, ticketsReleased.Length) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, ticketsReleased.Length)},
                vAxis: {title: 'За сколько поставили', minValue: 0},
                legend: { position: "none" },
            };

            const dataForDistributionDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForDistributionDiagram));
            const optionsForDistributionDiagram = {
                title: 'Распределение времени выполнения',
                hAxis: {title: 'За сколько поставили', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, maxWorkDays) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, maxWorkDays)},
                vAxis: {title: 'Кол-во поставленных задач', minValue: 0},
                legend: { position: "none" },
            };

            const cfdChart = new google.visualization.AreaChart(document.getElementById('cfd'));
            cfdChart.draw(dataForCfd, optionsForCfd);
            
            const controlChar = new google.visualization.AreaChart(document.getElementById('control-diagram'));
            controlChar.draw(dataForControlDiagram, optionsForControlDiagram);

            const distributionDiagram = new google.visualization.ColumnChart(document.getElementById('distribution-diagram'));
            distributionDiagram.draw(dataForDistributionDiagram, optionsForDistributionDiagram);
          }
        </script>
    }

    private static string CfdStatisticToString(DayStatisticDto t)
    {
        return $"[{t.DayNumber}," +
               $"{t.CfdStatistic.Released}," +
               $"{t.CfdStatistic.ToDeploy}," +
               $"{t.CfdStatistic.WithTesters}," +
               $"{t.CfdStatistic.WithProgrammers}," +
               $"{t.CfdStatistic.WithAnalysts}]";
    }
}

<div class="centered-100" style="display: flex; flex-direction: row; flex-wrap: wrap; position: relative;">
    <div class="diagram-container" style="width: 50%; height: 100%; display: flex; flex-direction: column;">
        <div id="cfd" style="width: 100%; height: 33%;"></div>
        <div id="control-diagram" style="width: 100%; height: 33%;"></div>
        <div id="distribution-diagram" style="width: 100%; height: 33%;"></div>
    </div>
    <div style="width: 300px">
        Всего клиентов (с учетом штрафов): @Model.TeamStatistic.TotalClientsGained
        Всего денег (с учетом штрафов): @Model.TeamStatistic.TotalProfitGained
        Штраф по клиентам: @Model.TeamStatistic.ClientsPenalty
        Штраф по деньгам: @Model.TeamStatistic.Penalty
        @{ RenderDayResult(); }
    </div>
</div>
@{
    RenderDiagram();
}
<button class="stepControlButtons rightButton" id="next">
    <p class="fs-6">Далее</p>
</button>
<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");
    setSwitchEvent("next", connection, "@Model.GameSessionId", "@Model.TeamId", 7, 0);
    setRollbackEvent(connection);
</script>