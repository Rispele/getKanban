@using Core.Dtos.DayStatistics
@model WebApp.Models.DayStepModels.CfdGraphStepModel

<div class="stepHeader">
    <h1 class="fs-1 fw- text-center">Команда @Html.Raw(Model.TeamName). День @Model.DayNumber</h1>
</div>

@functions
{
    private void RenderDiagram()
    {
        var dayStatistics = Model.TeamStatistic.DayStatistics;
        var rowsForCfd = new[] { "[8,2,4,4,1,0]" }.Concat(dayStatistics.Select(CfdStatisticToString));
        var tableForCfd = $"[{string.Join(",", rowsForCfd)}]";
        
        var rowsForControlDiagram = dayStatistics
            .SelectMany(d => d.TicketsReleased)
            .Select((ticket, i) => $"[{i}, {ticket.releaseDay - ticket.takingDay}]");
        var tableForDiagram = $"[{string.Join(",", rowsForControlDiagram)}]";

        var rowsForDistributionDiagram = dayStatistics
            .SelectMany(d => d.TicketsReleased)
            .GroupBy(t => t.releaseDay - t.takingDay)
            .Select(g => $"[{g.Key}, {g.Count()}]");
        var tableForDistributionDiagram = $"[{string.Join(",", rowsForDistributionDiagram)}]";
        
        <script type="text/javascript">
            const optionsForCfd = {
                stackedGraph: true,
                labels: ["День", "В аналитике", "В разработке", "В тестировании", "Готово к поставке", "Поставлено"],
                dateWindow : [8, 22],
                
                highlightCircleSize: 2,
                strokeWidth: 1,

                highlightSeriesOpts: {
                    strokeWidth: 3,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                }
            };

            const optionsForControlDiagram = {
                labels: ["День", "За сколько дней поставили"],
                dateWindow : [0, @Math.Max(10, dayStatistics.Count)],

                highlightCircleSize: 2,
                strokeWidth: 1,

                highlightSeriesOpts: {
                    strokeWidth: 3,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                }
            };

            const optionsForDistributionDiagram = {
                labels: ["За сколько дней поставили", "Кол-во задач"],
                dateWindow : [0, @Math.Max(10, dayStatistics.Count)],

                highlightCircleSize: 2,
                strokeWidth: 1,

                highlightSeriesOpts: {
                    strokeWidth: 3,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                }
            };

            Dygraph.onDOMready(function onDOMready() {
                new Dygraph(
                    document.getElementById("cfd"),
                    @tableForCfd, 
                    optionsForCfd);
                new Dygraph(
                    document.getElementById("control-diagram"),
                    @tableForDiagram, 
                    optionsForControlDiagram);
                new Dygraph(
                    document.getElementById("distribution-diagram"),
                    @tableForDistributionDiagram,
                    optionsForDistributionDiagram);
            });
        </script>
    }

    private static string CfdStatisticToString(DayStatisticDto t)
    {
        return $"[{t.DayNumber}," +
               $"{t.CfdStatistic.WithAnalysts}," +
               $"{t.CfdStatistic.WithProgrammers}," +
               $"{t.CfdStatistic.WithTesters}," +
               $"{t.CfdStatistic.ToDeploy}," +
               $"{t.CfdStatistic.Released}]";
    }
}

<script type="text/javascript" src="~/js/dygraph/dygraph.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/css/dygraph.min.css"/>

<div class="diagram-container" style="width: 50%; height: 100%; display: flex; flex-direction: column;">
    <div id="cfd" style="width:500px; height:300px;"></div>
    <div id="control-diagram" style="width:500px; height:300px;"></div>
    <div id="distribution-diagram" style="width:500px; height:300px;"></div>
</div>
@{
    RenderDiagram();
}
<button class="stepControlButtons position-relative rightButton" id="next">
    <p class="fs-6">Далее</p>
</button>

<script src="~/js/page-switch.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.GameSessionId", "@Model.TeamId");
    setSwitchEvent("next", connection, "@Model.GameSessionId", "@Model.TeamId", 7, 0);
    setRollbackEvent(connection);
</script>