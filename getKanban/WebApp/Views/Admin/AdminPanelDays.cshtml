@using Core.Dtos.DayStatistics
@model Core.Dtos.AdminPanelDaysDto

<div class="stepHeader">
    <h1 class="fs-1 text-center">Команда @Html.Raw(Model.TeamName)</h1>
</div>

<div class="container4">
    <h1 class="fs-4 text-center">Выберите день для изменения</h1>
    <hr class="divider">
    <div class="container2">

        @for (var i = Model.StartDayNumber; i < Model.CurrentDay.Number + (Model.IsFinished ? 1 : 0); i++)
        {
            <div class="checkboxCardsMargin">
                <div class="checkboxCardContainer creative-border-5 creative-border-rad-20 previousDayStyle">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">День @i</h2>
                    </div>
                </div>
            </div>
        }
        @if (!Model.IsFinished)
        {
            <div class="checkboxCardsMargin">
                <div class="checkboxCardContainer creative-border-4 creative-border-rad-20 currentDayStyle">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">День @Model.CurrentDay.Number</h2>
                        <img class="restart" src="/images/restart_button.svg" alt="restart">
                        @* <img class="settings" src="/images/settings_button.svg" alt="settings"> *@
                    </div>
                </div>
            </div>
        }

        @for (var i = Model.CurrentDay.Number + 1; i <= Model.FinishDayNumber; i++)
        {
            <div class="checkboxCardsMargin">
                <div class="checkboxCardContainer creative-border-1 creative-border-rad-20">
                    <div class="checkboxCardContent">
                        <h2 class="checkboxCardNumber">День @i</h2>
                    </div>
                </div>
            </div>
        }
    </div>

    <button class="stepControlButtons leftButton" id="prev">Назад</button>
</div>

<div class="container8 centered-100">
    <hr class="divider">
    <div class="diagram-container">
        <div class="diagram" id="cfd"></div>
        <div class="diagram" id="control-diagram"></div>
        <div class="diagram" id="distribution-diagram"></div>
    </div>
    @{ RenderDayResult(); }
</div>

@{ RenderDiagram(); }

@functions
{
    private void RenderDayResult()
    {
        if (Model.TeamStatistic is null)
        {
            return;
        }

        var dayByNumber = Model.TeamStatistic.DayStatistics.ToDictionary(d => d.DayNumber);
        <div class="allDayResults">
            <div class="finishDayResult headerLineStyle text-center">
                <h1 class="fs-6">Итого</h1>
            </div>

            <div class="finishDayResultContainer">
                <div class="finishDayResult clientLineStyle">
                    <p class="fs-6">Всего клиентов: @Model.TeamStatistic.TotalClientsGained</p>
                </div>

                <div class="finishDayResult otherLineStyle">
                    <p class="fs-6">Штраф по клиентам составил: @Model.TeamStatistic.ClientsPenalty</p>
                </div>

                <div class="finishDayResult moneyLineStyle">
                    <p class="fs-6">Всего денег: @(Model.TeamStatistic.TotalProfitGained)$</p>
                </div>

                <div class="finishDayResult otherLineStyle">
                    <p class="fs-6">Штраф по деньгам составил: @(Model.TeamStatistic.Penalty)$</p>
                </div>
            </div>

            <div class="scrollable-container">
                <div class="finishDayResult headerLineStyle text-center">
                    <h1 class="fs-6">По дням</h1>
                </div>

                @foreach (var data in Model.TeamStatistic.DayStatistics.OrderByDescending(t => t.DayNumber))
                {
                    <div class="finishDayResult dayLineStyle text-center">
                        <h1 class="fs-6">День @(data.DayNumber) (@(data.DayNumber >= Model.CurrentDay.Number ? Html.Raw("в процессе или еще не начат") : Html.Raw("закончен")))</h1>
                    </div>

                    <div class="finishDayResultContainer">
                        <div class="finishDayResult clientLineStyle">
                            <p class="fs-6">Получили клиентов: @data.ClientsGained</p>
                        </div>

                        @if (dayByNumber.TryGetValue(data.DayNumber - 1, out var prev) && prev.ProfitPerClient != data.ProfitPerClient)
                        {
                            <div class="finishDayResult otherLineStyle">
                                <p class="fs-6">Деньги за клиента: @(prev.ProfitPerClient)$ -> @(data.ProfitPerClient)$</p>
                            </div>
                        }
                        else
                        {
                            <div class="finishDayResult otherLineStyle">
                                <p class="fs-6">Деньги за клиента: @(data.ProfitPerClient)$</p>
                            </div>
                        }

                        <div class="finishDayResult moneyLineStyle">
                            <p class="fs-6">Получили денег: @(data.ProfitGained)$</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    private void RenderDiagram()
    {
        if (Model.TeamStatistic is null)
        {
            return;
        }

        var dayStatistics = Model.TeamStatistic.DayStatistics;
        var maxDayNumber = dayStatistics.Select(t => t.DayNumber).Max();
        var rowsForCfd = new[]
            {
                "[\"День\", \"Поставлено\", \"Готово к поставке\", \"В тестировании\", \"В разработке\", \"В аналитике\"]",
                "[8,0,1,4,4,2]"
            }
            .Concat(dayStatistics.Select(CfdStatisticToString))
            .ToList();
        rowsForCfd = rowsForCfd
            .Where(
                x => x
                    .Split(",")
                    .Where(el => !string.IsNullOrEmpty(el))
                    .ToArray().Length == 6)
            .ToList();

        var tableForCfd = $"[{string.Join(",", rowsForCfd)}]";

        var ticketsReleased = dayStatistics.SelectMany(d => d.TicketsReleased).ToArray();
        var rowsForControlDiagram = new[] { $"[\"Номер задачи\", \"За сколько поставили\"]{(ticketsReleased.Length > 0 ? "" : ", [0, 0]")}" }
            .Concat(ticketsReleased.Select((ticket, i) => $"[{i}, {ticket.releaseDay - ticket.takingDay}]"))
            .ToList();
        var tableForControlDiagram = $"[{string.Join(",", rowsForControlDiagram)}]";

        var ticketsCountPerWorkDaysCount = dayStatistics
            .SelectMany(d => d.TicketsReleased)
            .GroupBy(t => t.releaseDay!.Value - t.takingDay)
            .Select(t => (t.Key, t.Count()))
            .ToArray();
        var keys = ticketsCountPerWorkDaysCount.Select(t => t.Key).ToList();
        var maxWorkDays = keys.Count > 0 ? keys.Max() : 9;
        var rowsForDistributionDiagram = new[] { "[\"Дней в работе\"", $"\"Кол-во задач\"]{(ticketsCountPerWorkDaysCount.Length > 0 ? "" : ", [0, 0]")}" }
            .Concat(ticketsCountPerWorkDaysCount.Select(g => $"[{g.Key}, {g.Item2}]"));
        var tableForDistributionDiagram = $"[{string.Join(",", rowsForDistributionDiagram)}]";

        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawCharts);

            function drawCharts() {
                const dataForCfd = google.visualization.arrayToDataTable(@Html.Raw(tableForCfd));
                const optionsForCfd = {
                    title: 'Кумулятивная диаграмма',
                    hAxis: {title: 'День', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(8, Math.Max(18, maxDayNumber) - 7))}]"), minValue: 8, maxValue: @Math.Max(18, maxDayNumber) },
                    vAxis: {minValue: 0},
                    isStacked: true
                };

                const dataForControlDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForControlDiagram));
                const optionsForControlDiagram = {
                    title: 'Контрольная диагамма',
                    hAxis: {title: 'Поставленные задачи (в порядке релиза)', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, ticketsReleased.Length) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, ticketsReleased.Length)},
                    vAxis: {title: 'За сколько поставили', minValue: 0},
                    legend: { position: "none" },
                };

                const dataForDistributionDiagram = google.visualization.arrayToDataTable(@Html.Raw(tableForDistributionDiagram));
                const optionsForDistributionDiagram = {
                    title: 'Распределение времени выполнения',
                    hAxis: {title: 'За сколько поставили', ticks: @Html.Raw($"[{string.Join(",", Enumerable.Range(0, Math.Max(10, maxWorkDays) + 1))}]"), minValue: 0, maxValue: @Math.Max(10, maxWorkDays)},
                    vAxis: {title: 'Кол-во поставленных задач', minValue: 0},
                    legend: { position: "none" },
                };

                const cfdChart = new google.visualization.AreaChart(document.getElementById('cfd'));
                cfdChart.draw(dataForCfd, optionsForCfd);

                const controlChar = new google.visualization.AreaChart(document.getElementById('control-diagram'));
                controlChar.draw(dataForControlDiagram, optionsForControlDiagram);

                const distributionDiagram = new google.visualization.ColumnChart(document.getElementById('distribution-diagram'));
                distributionDiagram.draw(dataForDistributionDiagram, optionsForDistributionDiagram);
            }
        </script>
    }

    private static string CfdStatisticToString(DayStatisticDto t)
    {
        return $"[{t.DayNumber}," +
               $"{t.CfdStatistic.Released}," +
               $"{t.CfdStatistic.ToDeploy}," +
               $"{t.CfdStatistic.WithTesters}," +
               $"{t.CfdStatistic.WithProgrammers}," +
               $"{t.CfdStatistic.WithAnalysts}]";
    }
}

<script src="~/js/confirm-popup.js"></script>
<script src="~/js/setup-hub-connection.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module">
    const connection = setupHubConnection(new signalR.HubConnectionBuilder(), "@Model.SessionId", "@Model.TeamId", false);
    connection.start();
    
    connection.on("NotifyDayFinished", (sessionId, teamId) => {
        if (sessionId === "@Model.SessionId" && teamId === "@Model.TeamId") {
            window.location.reload();
        }
    });
    
    const button = document.getElementsByClassName(`restart`);
    if (button.length > 0) {
        javascriptConfirm(button[0], {
            title: `Перезапустить день`,
            message: `Вы уверены, что хотите перезапустить день @Model.CurrentDay.Number для команды @Model.TeamName?`,
            confirmText: "Да",
            cancelText: "Нет",
            cancelOnBackdropClick: true,
            onConfirm: async function() {
                await fetch("/@Model.SessionId/@Model.TeamId/api/restart-day", {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        SessionId: "@Model.SessionId",
                        TeamId: "@Model.TeamId",
                        DayNumber: @Model.CurrentDay.Number,
                    })
                });
                await connection.invoke("RollbackToDay", "@Model.SessionId", "@Model.TeamId", @Model.CurrentDay.Number);
                window.location.href = `/admin?sessionId=@Model.SessionId`;
            }
        });
    }
    
    document.getElementById(`prev`).addEventListener(`click`, () => {
        window.location.href = `/admin?sessionId=@Model.SessionId`;
    });

</script>