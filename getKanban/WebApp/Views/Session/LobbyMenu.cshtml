@using Core.RequestContexts
@using Domain.Game
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Core.Dtos.GameSessionDto

@{
    Context.Response.Cookies.Append(RequestContextKeys.SessionId, Model.Id.ToString());
    
    var isAdmin = ((Model.RequesterRole & ParticipantRole.Creator) == ParticipantRole.Creator);
    var currentTeam = Model.Angels.Participants.Users.SingleOrDefault(x => x.Id == Model.RequesterId) != default
       ? Model.Angels
       : Model.Teams.Single(x => x.Participants.Users.SingleOrDefault(u => u.Id == Model.RequesterId) != default);
    var allTeams = Model.Teams.Concat([Model.Angels]).ToArray();
    var isCurrentTeamAngels = currentTeam.Name == "Ангелы";
    var pageToRedirectWhenGameStarted = isCurrentTeamAngels ? $"/admin?sessionId={Model.Id}" : $"/{Model.Id}/{currentTeam.Id}/step/1";
    
    var allPlayerIds = Model.Teams
        .SelectMany(x => x.Participants.Users)
        .Select(x => x.Id)
        .Concat(
            Model.Angels.Participants.Users
                .Select(x => x.Id));
}

<div class="stepHeader">
    <h1 class="fs-1 text-center">getKanban: @Model.Name</h1>
</div>

<div class="commandEditorContainer centered-25">
    <div class="commandEditorLWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">
        @foreach (var team in Model.Teams)
        {
            <div class="commandEditorCommandContainer commandEditorBorderRadius">
                <div class="commandEditorHeaders text-center" id="team-header-@team.Id"></div>
                <div class="commandEditorNamesContainer text-center" id="team-@team.Id">
                    @foreach (var player in team.Participants.Users)
                    {
                        <p class="fs-6" id="user-@player.Id">
                            @player.Name
                            @if (isAdmin)
                            {
                                <img src="/images/remove_button.svg" alt="edit" width="20" height="20" style="cursor:pointer" id="remove-@player.Id">
                            }
                        </p>
                    }
                </div>
            </div>
        }
    </div>
    <div class="commandEditorSWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">
        <div class="commandEditorHeaders text-center" id="team-header-@Model.Angels.Id"></div>
        <div class="commandEditorNamesContainer angelsEditor text-center" id="team-@Model.Angels.Id">
            @foreach (var player in Model.Angels.Participants.Users)
            {
                <p class="fs-6" id="user-@player.Id">
                    @player.Name
                    @if (isAdmin && player.Id != Model.RequesterId)
                    {
                        <img src="/images/remove_button.svg" alt="edit" width="20" height="20" style="cursor:pointer" id="remove-@player.Id">
                    }
                </p>
            }
        </div>
    </div>
</div>

@if (isAdmin)
{
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="close">Закрыть игру</button>
    </form>
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="start">Начать игру</button>
    </form>
}
else
{
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="leave">Покинуть игру</button>
    </form>
}

<script src="~/js/fetchJSON.js"></script>
<script src="~/js/value-helper.js"></script>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module" async="async">
    const gameSessionId = `@Model.Id`;
    const currentTeamId = `@currentTeam.Id`;
    const currentUserId = `@Model.RequesterId`;
    const otherUserIds = @Html.Raw(Json.Serialize(allPlayerIds.Except([Model.RequesterId]).ToArray()));
    const pageToRedirectWhenGameStarted = `@pageToRedirectWhenGameStarted`;
    const baseUrl = `/${gameSessionId}/${currentTeamId}/api`;
    const teamLinks = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Participants.InviteCode).Concat([Model.Angels.Participants.InviteCode])));
    const allTeamIds = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Id).Concat([Model.Angels.Id])));
    const teamNames = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Name).Concat([Model.Angels.Name])));
    const allTeamIdsExceptAngels = allTeamIds.filter((x) => {return x !== `@Model.Angels.Id`});
    
    const lobbyHubConnection = new signalR.HubConnectionBuilder().withUrl(`/lobbyHub`).build();

    lobbyHubConnection.on(`NotifyCloseGame`, () => {window.location.href = `/`;});
    lobbyHubConnection.on(`NotifyLeaveGame`, userId => {
        if (userId === currentUserId) {
            window.location.href = `/`;
            return;
        }
        const playerElement = document.getElementById(`user-${userId}`);
        const playerName = playerElement.textContent;
        playerElement.remove();
        showMessage(`Игрок ${playerName} покидает игру`, MessageType.NOTIFICATION);
    });
    lobbyHubConnection.on(`NotifyStartGame`, () => {
        window.location.href = pageToRedirectWhenGameStarted;
    });
    lobbyHubConnection.on(`NotifyUpdateTeamName`, (teamId, teamName) => {
        teamNames[allTeamIds.indexOf(teamId)] = teamName;
        refreshTeamsHeaders();
    });
    lobbyHubConnection.on(`NotifyConnectionUpdate`, (userId, isConnected) => {
        if (userId === currentUserId) {
            showMessage(`Соединение с игрой ${isConnected ? `потеряно` : `восстановлено`}`, isConnected ? MessageType.ERROR : MessageType.SUCCESS);
        }
        const playerElement = document.getElementById(`user-${userId}`);
        const connectionLostIcon = document.getElementById(`connection-lost-${userId}`);
        if (hasValue(connectionLostIcon)) { connectionLostIcon.remove(); }
        if (!isConnected) {
            const connectionLostIcon = buildIcon(`connection-lost-${userId}`, `/images/disconnected_icon.svg`);
            playerElement.appendChild(connectionLostIcon);
        }
    });
    lobbyHubConnection.on(`NotifyJoinGame`, (teamId, userId, userName) => {
        const teamName = document.getElementById(`team-header-${teamId}`).innerText;
    
        const teamBlock = document.getElementById(`team-${teamId}`);
        const teamUsers = teamBlock.getElementsByClassName(`fs-6`);
        for (let user of teamUsers) {if (user.id === `user-${userId}`) { return; }}
        
        const userInOtherTeam = document.getElementById(`user-${userId}`);
        if (hasValue(userInOtherTeam) && userInOtherTeam.parentElement.id !== `team-${teamId}`) {
            userInOtherTeam.remove();
            showMessage(`Игрок ${userName} меняет команду`, MessageType.NOTIFICATION);
        }

        const playerElement = document.createElement(`p`);
        playerElement.setAttribute(`class`, `fs-6`);
        playerElement.setAttribute(`id`, `user-${userId}`);
        playerElement.textContent = userName;

        @if (isAdmin)
        {
            <text>
            const removeButton = buildIcon(`remove-${userId}`, `/images/remove_button.svg`);
            removeButton.addEventListener(`click`, async () => {
                const isRemoved = await fetchPostJSON(`${baseUrl}/remove-user`, JSON.stringify(userId));
                if (isRemoved) await lobbyHubConnection.invoke(`RemoveUser`, gameSessionId, userId);
            });
            playerElement.appendChild(removeButton);
            </text>
        }

        document.getElementById(`team-${teamId}`).appendChild(playerElement);
        
        showMessage(`Игрок ${userName} присоединяется к команде ${teamName}`, MessageType.NOTIFICATION);
    });
    
    await lobbyHubConnection.start();
    
    const user = await fetchPostJSON(`${baseUrl}/check-user-joined`);
    if (!hasValue(user)) {window.location.href = `/`;}
    await lobbyHubConnection.invoke(`JoinGame`, gameSessionId, currentTeamId, user[`id`], user[`name`]);
    
    @if (isAdmin)
    {
        <text>
        document.getElementById(`start`).addEventListener(`click`, async () => {
            await fetchPostJSON(`${baseUrl}/start-game`);
            await lobbyHubConnection.invoke(`StartGame`, gameSessionId);
        });
        document.getElementById(`close`).addEventListener(`click`, async () => {
            await fetchPostJSON(`${baseUrl}/close-game`);
            await lobbyHubConnection.invoke(`CloseGame`, gameSessionId);
            window.location.href = `/`;
        });
        </text>
    }
    else
    {
        <text>
        document.getElementById(`leave`).addEventListener(`click`, async () => {
            const leftUserId = await fetchPostJSON(`${baseUrl}/leave-game`);
            if (hasValue(leftUserId)) {
                await lobbyHubConnection.invoke(`LeaveGame`, gameSessionId, leftUserId);
                window.location.href = `/`;
            } else {
                showMessage(`Ошибка сервера при выходе из игры`, MessageType.ERROR);
            }
        });
        </text>
    }
    
    refreshTeamsHeaders();

    function refreshTeamsHeaders() {
        @if (isAdmin)
        {
            <text>
            placeRemoveUserButtons(otherUserIds);
            recreateEditBlocks(allTeamIds);
            placeTeamNames(allTeamIds, teamNames);
            placeTeamNameEditButtons(allTeamIdsExceptAngels);
            placeTeamLinks(teamNames, allTeamIds, teamLinks);
            </text>
        }
        else
        {
            <text>
            recreateEditBlocks(allTeamIds);
            placeTeamNames(allTeamIds, teamNames);
            </text>
            @if (currentTeam.Id != Model.Angels.Id)
            {
                <text>
                placeTeamNameEditButtons([currentTeamId]);
                </text>
            }
        }

        function recreateEditBlocks(teamIds) {
            for (let teamId of teamIds) {
                let editBlock = document.getElementById(`team-header-${teamId}`);
                if (hasValue(editBlock)) {
                    editBlock.innerHTML = `<div class="teamManageButtons" id="team-manage-buttons-${teamId}"></div>`;
                }
            }
        }

        function placeRemoveUserButtons(userIds) {
            for (let userId of userIds) {
                document.getElementById(`remove-${userId}`).addEventListener(`click`, async () => {
                    const isRemoved = await fetchPostJSON(`${baseUrl}/remove-user`, JSON.stringify(userId));
                    if (isRemoved) {
                        await lobbyHubConnection.invoke(`RemoveUser`, gameSessionId, userId);
                    } else {
                        showMessage(`Ошибка сервера при удалении пользователя`, MessageType.ERROR);
                    }
                });
            }
        }

        function placeTeamNameEditButtons(teamIds) {
            for (let teamId of teamIds) {
                const icon = buildIcon(`edit-button-${teamId}`, `/images/edit_button.svg`);
                icon.addEventListener(`click`, () => { replaceWithInput(teamId) });
                document.getElementById(`team-manage-buttons-${teamId}`).appendChild(icon);
            }
        }

        function replaceWithInput(teamId){
            const headersBlock = document.getElementById(`team-header-${teamId}`);
            headersBlock.innerHTML = ``;

            const input = document.createElement(`input`);
            input.setAttribute(`id`, `edit-input-${teamId}`);

            const saveButton = buildIcon(`edit-submit-${teamId}`, `/images/save_button.svg`);
            saveButton.addEventListener(`click`, async () => {
                const teamName = input.value;
                if (teamName.length <= 0) {
                    showMessage(`Название команды не может быть строкой длины 0`, MessageType.ERROR);
                    return;
                }
                const isUpdated = await fetchPostJSON(`${baseUrl}/update-team-name`,
                    JSON.stringify({teamId: teamId, teamName: teamName}));
                if (isUpdated) {
                    await lobbyHubConnection.invoke(`UpdateTeamName`, gameSessionId, teamId, teamName);
                    teamNames[allTeamIds.indexOf(teamId)] = teamName;
                    showMessage(`Название команды успешно обновлено`, MessageType.SUCCESS)
                } else {
                    showMessage(`Ошибка сервера при обновлении названия команды`, MessageType.ERROR);
                }
                refreshTeamsHeaders();
            });

            const backButton = buildIcon(`edit-back-${teamId}`, `/images/exit_button.svg`);
            backButton.addEventListener(`click`, () => {refreshTeamsHeaders();});

            headersBlock.appendChild(saveButton);
            headersBlock.appendChild(input);
            headersBlock.appendChild(backButton);
        }

        function placeTeamNames(teamIds, teamNames) {
            for (let i = 0; i < teamIds.length; i++) {
                document.getElementById(`team-header-${teamIds[i]}`).innerHTML =
                    `${teamNames[i]}<div class="teamManageButtons" id="team-manage-buttons-${teamIds[i]}"></div>`
            }
        }

        function placeTeamLinks(teamNames, teamIds, teamInviteLinks) {
            for (let i = 0; i < teamIds.length; i++) {
                const teamIcon = buildIcon(`link-${teamInviteLinks[i]}`, `/images/link_button.svg`);
                teamIcon.addEventListener(`click`, async () => {
                    await navigator.clipboard.writeText(teamInviteLinks[i])
                    showMessage(`Код приглашения в команду ${teamNames[i]} скопирован`, MessageType.NOTIFICATION);
                });
                document.getElementById(`team-manage-buttons-${teamIds[i]}`).appendChild(teamIcon);
            }
        }
    }

    function buildIcon(iconId, imgPath, clickable=true) {
        const image = document.createElement(`img`);
        image.setAttribute(`src`, imgPath);
        image.setAttribute(`alt`, `edit`);
        image.setAttribute(`width`, `20`);
        image.setAttribute(`height`, `20`);
        if (clickable) image.setAttribute(`style`, `cursor:pointer`);
        image.setAttribute(`id`, iconId);
        return image;
    }

</script>

<script>
    const container = document.querySelector('.commandEditorLWindow');
    
    function updateLastInColumn() {
        const items = Array.from(container.children);

        const itemWidth = items[0].offsetWidth;
        const itemsPerRow = Math.floor(container.offsetWidth / itemWidth);

        items.forEach((item, index) => {
            if ((index + 1) % itemsPerRow === 0) {
                item.style.borderRight = "none";
            }
            else {
                item.style.borderRight = "1px dashed #CAC4D0"
            }
        });
    }

    updateLastInColumn();

    window.addEventListener('resize', updateLastInColumn);
</script>