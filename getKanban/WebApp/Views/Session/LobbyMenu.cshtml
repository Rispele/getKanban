@using Core.RequestContexts
@using Domain.Game
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Core.Dtos.GameSessionDto

@{
    Context.Response.Cookies.Append(RequestContextKeys.SessionId, Model.Id.ToString());
    
    var isAdmin = ((Model.RequesterRole & ParticipantRole.Creator) == ParticipantRole.Creator); 
    var currentTeam = Model.Angels.Participants.Users.SingleOrDefault(x => x.Id == Model.RequesterId) != default
       ? Model.Angels
       : Model.Teams.SingleOrDefault(x => x.Participants.Users.SingleOrDefault(u => u.Id == Model.RequesterId) != default);

    var allPlayerIds = Model.Teams
        .SelectMany(x => x.Participants.Users)
        .Select(x => x.Id)
        .Concat(
            Model.Angels.Participants.Users
                .Select(x => x.Id));
}

<div class="commandEditorHeader text-center">
    <h1 class="display-4 fw-bold">getKanban: @Model.Name</h1>
</div>

<div class="commandEditorContainer centered-25">
    <div class="commandEditorLWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">
        @foreach (var team in Model.Teams)
        {
            <div class="commandEditorCommandContainer commandEditorBorderRadius">
                <div class="commandEditorHeaders text-center edit-@team.Id" id="headers-@team.Id">
                    <div class="teamManageButtons manage-@team.Id"></div>
                </div>
                <div class="commandEditorNamesContainer text-center" id="@team.Id">
                    @foreach (var player in team.Participants.Users)
                    {
                        <p class="fs-6" id="@player.Id">
                            @player.Name
                            @if (isAdmin)
                            {
                                <img src="/images/remove_button.svg" alt="edit" width="20" height="20" style="cursor:pointer" id="remove-@player.Id">
                            }
                        </p>
                    }
                </div>
            </div>
        }
    </div>
    <div class="commandEditorSWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">
        <div class="commandEditorHeaders text-center edit-@Model.Angels.Id" id="headers-@Model.Angels.Id">
            <div class="teamManageButtons manage-@Model.Angels.Id"></div>
        </div>
        <div class="commandEditorNamesContainer angelsEditor text-center" id="@Model.Angels.Id">
            @foreach (var player in Model.Angels.Participants.Users)
            {
                <p class="fs-6" id="@player.Id">
                    @player.Name
                    @if (isAdmin && player.Id != Model.RequesterId)
                    {
                        <img src="/images/remove_button.svg" alt="edit" width="20" height="20" style="cursor:pointer" id="remove-@player.Id">
                    }
                </p>
            }
        </div>
    </div>
</div>

@if (isAdmin)
{
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="close">Закрыть игру</button>
    </form>
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="start">Начать игру</button>
    </form>
}
else
{
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" id="leave">Покинуть игру</button>
    </form>
}

<script src="/js/signalr/dist/browser/signalr.js"></script>
<script type="module" async="async">
    const teamLinks = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Participants.InviteCode).Concat([Model.Angels.Participants.InviteCode])));
    const teamIds = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Id).Concat([Model.Angels.Id])));
    const teamNames = @Html.Raw(Json.Serialize(Model.Teams.Select(x => x.Name).Concat([Model.Angels.Name])));
    
    const lobbyHubConnection = new signalR.HubConnectionBuilder().withUrl(`/lobbyHub`).build();

    lobbyHubConnection.on(`NotifyClosed`, () => {window.location.href = `/`;});
    lobbyHubConnection.on(`NotifyLeft`, userId => {
        if (userId === `@Model.RequesterId`) {
            window.location.href = `/`;
            return;
        }
        const playerElement = document.getElementById(userId);
        const playerName = playerElement.textContent;
        playerElement.remove();
        showMessage(`Игрок ${playerName} покидает игру`, false);
    });
    lobbyHubConnection.on(`NotifyConnectionRestore`, userId => {
        if (userId === `@Model.RequesterId`) {
            showMessage(`Соединение с игрой восстановлено`);
        }
        const playerElement = document.getElementById(userId);
        const images = playerElement.getElementsByTagName(`img`);
        for (let img of images) {if (img.id === `connection-lost-${userId}`) {img.remove();}}
    });
    lobbyHubConnection.on(`NotifyConnectionLost`, userId => {
        if (userId === `@Model.RequesterId`) {
            showMessage(`Соединение с игрой потеряно`);
        }
        const playerElement = document.getElementById(userId);
        const images = playerElement.getElementsByTagName(`img`);
        for (let img of images) {if (img.id === `connection-lost-${userId}`) {img.remove();}}
        const connectionLostIcon = buildIcon(`connection-lost-${userId}`, `/images/disconnected_icon.svg`);
        playerElement.appendChild(connectionLostIcon);
    });
    lobbyHubConnection.on(`NotifyJoined`, (teamId, userId, userName) => {
        const teamBlock = document.getElementById(teamId);
        const teamPlayers = teamBlock.getElementsByClassName(`fs-6`);
        for (let pl of teamPlayers) {if (pl.id === userId) { return; }}
        
        let playerElementInOtherTeam = document.getElementById(userId);
        if (playerElementInOtherTeam !== null && playerElementInOtherTeam !== undefined) {playerElementInOtherTeam.remove();}

        const playerElement = document.createElement(`p`);
        playerElement.setAttribute(`class`, `fs-6`);
        playerElement.setAttribute(`id`, userId);
        playerElement.textContent = userName;

        const team = document.getElementById(teamId);

        if (@isAdmin.ToString().ToLower()) {
            const removeButton = buildIcon(`remove-${userId}`, `/images/remove_button.svg`);
            removeButton.addEventListener(`click`, () => {
                lobbyHubConnection.invoke(`RemovePlayerFromSessionAndLobby`, `@Model.Id`, userId);
            });
            playerElement.appendChild(removeButton);
        }

        team.appendChild(playerElement);

        const teamName = document.getElementById(`headers-${teamId}`).innerText;
        showMessage(`Игрок ${userName} присоединяется к команде "${teamName}"`, false);
    });
    lobbyHubConnection.on(`NotifyStarted`, () => {
        window.location.href = @((currentTeam!.Name == "Ангелы").ToString().ToLower())
            ? `/admin?sessionId=@Model.Id`
            : `/@Model.Id/@currentTeam.Id/step/1`;
    });
    lobbyHubConnection.on(`NotifyRenamed`, (teamId, teamName) => {
        teamNames[teamIds.indexOf(teamId)] = teamName;
        refreshTeamsHeaders();
    });
    
    await lobbyHubConnection.start()
    .then(() => {
        let path = window.location.pathname.split(`session/`)[1];
        path = path.split(`/lobby-menu`)[0];
        const inviteCode = path.replace(`/`, `.`);
    
        lobbyHubConnection.invoke(`CheckPlayerJoinedSession`, inviteCode);
        lobbyHubConnection.on(`NotifyPlayerCheck`, (hasJoined, userId) => {
            if (hasJoined) {return;}
            fetch(`/session/join?inviteCode=${inviteCode}`, {redirect: `follow`})
            .then(sessionId => sessionId.json())
            .then(sessionId => {
                if (sessionId.length === 0) {
                    showMessage(`Невозможно присоединиться к сессии с данным кодом приглашения`);
                    return;
                }
                window.location.href = `/session/${sessionId}`;
            });
        });
    })
    .then(() => {lobbyHubConnection.invoke(`JoinLobby`, `@Model.Id`);});
    
    if (@isAdmin.ToString().ToLower()) {
        document.getElementById(`start`).addEventListener(`click`, async () => {
            await lobbyHubConnection.invoke(`StartGame`, `@Model.Id`);
        });
        document.getElementById(`close`).addEventListener(`click`, async () => {
            await lobbyHubConnection.invoke(`CloseLobby`, `@Model.Id`)
                .then(() => { window.location.href = `/` });
        });
    } else {
        document.getElementById(`leave`).addEventListener(`click`, async () => {
            await lobbyHubConnection.invoke(`LeaveLobby`, `@Model.Id`)
                .then(() => { window.location.href = `/` });
        });
    }

    refreshTeamsHeaders();

    function refreshTeamsHeaders() {
        if (@isAdmin.ToString().ToLower()) {
            @foreach (var id in allPlayerIds.Except([Model.RequesterId]))
            {
                <text>
                    document.getElementById(`remove-@id`).addEventListener(`click`, () => {
                        lobbyHubConnection.invoke(`RemovePlayerFromSessionAndLobby`, `@Model.Id`, `@id`);
                    });
                </text>
            }

            for (let teamId of teamIds) recreateEditHeaderBlock(teamId);
            placeTeamNames(teamIds, teamNames);
            placeTeamNameEditButtons(teamIds.filter((x) => {return x !== `@Model.Angels.Id`}));
            placeTeamLinks(teamNames, teamIds, teamLinks);
        } else if (@((currentTeam is not null).ToString().ToLower())) {
            for (let teamId of teamIds) recreateEditHeaderBlock(teamId);
            placeTeamNames(teamIds, teamNames);
            if (@((currentTeam is not null && currentTeam.Id != Model.Angels.Id).ToString().ToLower())) placeTeamNameEditButtons([`@currentTeam!.Id`]);
        }
    }

    function placeTeamNameEditButtons(teamIds) {
        for (let teamId of teamIds) {
            const icon = buildIcon(`edit-button-${teamId}`, `/images/edit_button.svg`);
            icon.addEventListener(`click`, () => { replaceWithInput(teamId) });
            document.getElementsByClassName(`manage-${teamId}`)[0].appendChild(icon);
        }

        function replaceWithInput(teamId){
            const headersBlock = document.getElementById(`headers-${teamId}`);
            headersBlock.innerHTML = ``;

            const input = document.createElement(`input`);
            input.setAttribute(`id`, `edit-input-${teamId}`);

            const saveButton = document.createElement(`button`);
            saveButton.setAttribute(`id`, `edit-submit-${teamId}`);
            saveButton.innerText = `Сохранить`;
            saveButton.addEventListener(`click`, () => {
                const teamName = input.value;
                if (teamName.length <= 0) return;
                
                lobbyHubConnection.invoke(`UpdateName`, `@Model.Id`, teamId, teamName)
                .then(() => {
                    teamNames[teamIds.indexOf(teamId)] = teamName;
                    refreshTeamsHeaders();
                });
            });
            
            const backButton = document.createElement(`button`);
            backButton.setAttribute(`id`, `edit-back-${teamId}`);
            backButton.innerText = `Назад`;
            backButton.addEventListener(`click`, () => {refreshTeamsHeaders();});
            
            headersBlock.appendChild(saveButton);
            headersBlock.appendChild(input);
            headersBlock.appendChild(backButton);
        }
    }

    function placeTeamNames(teamIds, teamNames) {
        for (let i = 0; i < teamIds.length; i++) {
            getOrCreateEditBlock(teamIds[i]).innerHTML = `${teamNames[i]}<div class="teamManageButtons manage-${teamIds[i]}"></div>`
        }
    }

    function placeTeamLinks(teamNames, teamIds, teamInviteLinks) {
        for (let i = 0; i < teamIds.length; i++) {
            const teamIcon = buildIcon(`link-${teamInviteLinks[i]}`, `/images/link_button.svg`);
            teamIcon.addEventListener(`click`, () => {
                navigator.clipboard.writeText(teamInviteLinks[i])
                    .then(() => showMessage(`Код приглашения в команду ${teamNames[i]} скопирован`, false))
            });
            document.getElementsByClassName(`manage-${teamIds[i]}`)[0].appendChild(teamIcon);
        }
    }

    function buildIcon(iconId, imgPath, clickable=true) {
        const image = document.createElement(`img`);
        image.setAttribute(`src`, imgPath);
        image.setAttribute(`alt`, `edit`);
        image.setAttribute(`width`, `20`);
        image.setAttribute(`height`, `20`);
        if (clickable) image.setAttribute(`style`, `cursor:pointer`);
        image.setAttribute(`id`, iconId);
        return image;
    }

    function recreateEditHeaderBlock(teamId) {
        let editHeaderBlock = document.getElementsByClassName(`edit-${teamId}`)[0];
        if (editHeaderBlock !== null && editHeaderBlock !== undefined) {
            editHeaderBlock.innerHTML = ``;
            editHeaderBlock.textContent = `<div class="teamManageButtons manage-${teamId}"></div>`;
            editHeaderBlock.innerHTML = `<div class="teamManageButtons manage-${teamId}"></div>`;
        }
        
        return editHeaderBlock;
    }

    function getOrCreateEditBlock(teamId) {
        let editBlock = document.getElementsByClassName(`edit-${teamId}`)[0];
        return editBlock !== null && editBlock !== undefined ? editBlock : recreateEditHeaderBlock(teamId);
    }
</script>

<script>
    const container = document.querySelector('.commandEditorLWindow');
    
    function updateLastInColumn() {
        const items = Array.from(container.children);

        const itemWidth = items[0].offsetWidth;
        const itemsPerRow = Math.floor(container.offsetWidth / itemWidth);

        items.forEach((item, index) => {
            if ((index + 1) % itemsPerRow === 0) {
                item.style.borderRight = "none";
            }
            else {
                item.style.borderRight = "1px dashed #CAC4D0"
            }
        });
    }

    updateLastInColumn();

    window.addEventListener('resize', updateLastInColumn);
</script>