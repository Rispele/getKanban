@using Domain.Game
@model Core.Dtos.GameSessionDto

@* Header *@
<div class="commandEditorHeader text-center">
    <h1 class="display-4 fw-bold">getKanban: "@Model.Name"</h1>
</div>

@* Windows *@
<div class="commandEditorContainer centered-25">

    @* Command windows *@
    <div class="commandEditorLWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">

        @foreach (var team in Model.Teams)
        {
            @* Command window template *@
            <div class="commandEditorCommandContainer commandEditorBorderRadius">

                @* Command header container *@
                <div class="commandEditorHeaders text-center" id="headers-@team.Id"></div>

                @* Players in command *@
                <div class="commandEditorNamesContainer text-center" id="@team.Id">
                    @foreach (var player in team.Participants.Users)
                    {
                        <p class="fs-6" id="@player.Id">@player.Name</p>
                    }
                </div>
            </div>
        }
    </div>

    @* Angels *@
    <div class="commandEditorSWindow commandEditorWindowsHeight commandEditorBorderStyle commandEditorBorderWidth commandEditorBorderRadius">

        @* Angels header container *@
        <div class="commandEditorHeaders text-center" id="headers-@Model.Angels.Id"></div>

        @* Angels Name *@
        <div class="commandEditorNamesContainer angelsEditor text-center" id="@Model.Angels.Id">
            @foreach (var player in Model.Angels.Participants.Users)
            {
                <p class="fs-6" id="@player.Id">@player.Name</p>
            }
        </div>
    </div>
</div>

@if ((Model.RequesterRole & ParticipantRole.Creator) == ParticipantRole.Creator)
{
    <form class="text-center">
        <button class="commandEditorButtonsTemplate authorizationButton" type="button" onclick="startGame()">Начать игру</button>
    </form>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/lobbyHub").build();
    connection.start();
    connection.on("NotifyJoined", function (teamId, userId, userName) {
        const playerElement = document.createElement("p");
        playerElement.setAttribute("class", "fs-6");
        playerElement.setAttribute("id", userId.toString());
        const team = document.getElementById(teamId);
        team.appendChild(playerElement);
        playerElement.textContent = userName.toString();
    });
    
    function startGame() {window.location.href = `http://localhost:5046/step/1`}
</script>

<script type="module" async="async">
    connection.on("NotifyRenamed", function (teamId, teamName) {
        refreshTeamsHeaders(teamId, teamName)
    });
    
    const currentTeamJson = await fetch("http://localhost:5046/session/get-current-team?sessionId=@Model.Id")
        .then(r => r.text())
        .then(data => {
            if (data.length > 0) {
                return JSON.parse(data);
            } else {
            }
        });

    let currentTeamId = currentTeamJson["id"];
    let currentTeamName = currentTeamJson["name"];
    let currentTeamLink = currentTeamJson["participants"]["inviteCode"];

    const teamLinks = [];
    const teamIds = [];
    const teamNames = [];
    @foreach (var team in Model.Teams)
    {
        @:teamLinks.push("@team.Participants.InviteCode");
        @:teamIds.push("@team.Id");
        @:teamNames.push("@Html.Raw(team.Name)");
    }
    teamLinks.push("@Model.Angels.Participants.InviteCode");
    teamIds.push("@Model.Angels.Id");
    teamNames.push("@Html.Raw(Model.Angels.Name)");
    
    refreshTeamsHeaders();
    
    function refreshTeamsHeaders(renameTeamId = null, renameTeamName = null) {
        if (renameTeamId !== null) {
            teamNames[teamIds.indexOf(renameTeamId)] = renameTeamName;
        }
        const isCurrentUserAdmin = @(((Model.RequesterRole & ParticipantRole.Creator) == ParticipantRole.Creator).ToString().ToLower());
        
        if (isCurrentUserAdmin) {
            for (let i = 0; i < teamIds.length; i++) {
                recreateEditBlock(teamIds[i]);
            }
            placeTeamNameEditButtons(teamIds);
            placeTeamNames(teamIds, teamNames);
            placeTeamLinks(teamIds, teamLinks);
        } else if (currentTeamId !== null) {
            for (let i = 0; i < teamIds.length; i++) {
                recreateEditBlock(teamIds[i]);
            }
            placeTeamNameEditButtons([currentTeamId]);
            placeTeamNames(teamIds, teamNames);
        }
    }

    function placeTeamNameEditButtons(teamIds) {
        for (let teamId of teamIds) {
            const icon = buildIcon(`edit-button-${teamId}`, "images/edit_button.png");
            icon.addEventListener("click", function () { replaceWithInput(teamId) });
            getOrCreateEditBlock(teamId).appendChild(icon);
        }

        function replaceWithInput(teamId){
            const headersBlock = document.getElementById(`headers-${teamId}`);
            headersBlock.innerHTML = '';

            const input = document.createElement("input");
            input.setAttribute("id", `edit-input-${teamId}`);

            const button = document.createElement("button");
            button.setAttribute("id", `edit-submit-${teamId}`);
            button.innerText = "save";
            button.addEventListener("click", function () {
                const teamName = input.value.toString();
                if (teamName.length > 0) {
                    fetch(`http://localhost:5046/session/update-team-name?sessionId=@Model.Id&teamId=${teamId}&name=${teamName}`)
                        .then(function () {
                            connection.invoke("UpdateName", "@Model.Id", teamId)
                                .then(function () {
                                    refreshTeamsHeaders(teamId, teamName);
                                });
                        });
                }
            });

            const editBlock = getOrCreateEditBlock(teamId)
            editBlock.appendChild(button);
            editBlock.appendChild(input);
        }
    }
    
    function placeTeamNames(teamIds, teamNames) {
        for (let i = 0; i < teamIds.length; i++) {
            const text = document.createElement("p");
            text.setAttribute("id", `edit-name-${teamIds[i]}`)
            text.innerText = teamNames[i];
            getOrCreateEditBlock(teamIds[i]).appendChild(text);
        }
    }
    
    function placeTeamLinks(teamIds, teamInviteLinks) {
        for (let i = 0; i < teamIds.length; i++) {
            const teamIcon = buildIcon(`link-${teamInviteLinks[i]}`, "images/copy_button.jpg");
            teamIcon.addEventListener('click', function () {
                navigator.clipboard.writeText(teamInviteLinks[i])
                    .then(() => console.log(`Text copied: ${teamInviteLinks[i]}`))
            });
            getOrCreateEditBlock(teamIds[i]).appendChild(teamIcon);
        }
    }

    function buildIcon(iconId, imgPath) {
        const image = document.createElement("img");
        image.setAttribute("src", imgPath);
        image.setAttribute("alt", "edit");
        image.setAttribute("width", "20");
        image.setAttribute("height", "20");
        image.setAttribute("id", iconId);
        return image;
    }
    
    function recreateEditBlock(teamId) {
        let editBlock = document.getElementById(`edit-${teamId}`);
        if (editBlock !== null && editBlock !== undefined) {
            editBlock.remove();
        }
        editBlock = document.createElement("p");
        editBlock.setAttribute("class", "fs-6");
        editBlock.setAttribute("id", `edit-${teamId}`);
        document.getElementById(`headers-${teamId}`).appendChild(editBlock);
        return editBlock;
    }
    
    function getOrCreateEditBlock(teamId) {
        let editBlock = document.getElementById(`edit-${teamId}`);
        return editBlock !== null && editBlock !== undefined ? editBlock : recreateEditBlock(teamId);
    }
</script>